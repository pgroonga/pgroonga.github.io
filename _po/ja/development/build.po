msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2024-10-16 12:20+0900\n"
"Last-Translator: Kouhei Sutou <kou@cozmixng.org>, 2023\n"
"Language-Team: Japanese (https://app.transifex.com/groonga/teams/174082/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: Build\n"
"---"
msgstr ""
"---\n"
"title: ビルド\n"
"---"

msgid "# Build"
msgstr "# ビルド"

msgid ""
"This document describes how to build PGroonga as a developer. For example, a "
"developer who wants to add a new feature, fix a bug and so on."
msgstr ""
"このドキュメントは開発者としてPGroongaをビルドする方法を説明しています。たと"
"えば、新しい機能を開発したりバグを直したりするような開発者が対象になります。"

msgid ""
"If you want to be a casual PGroonga developer, [build as a casual developers]"
"(build-casual.html) is better than this."
msgstr ""
"もし、カジュアルなPGroonga開発者になりたい場合は、このドキュメントよりも[カ"
"ジュアル開発者としてビルド](build-casual.html)の方が適切です。"

msgid "## Setting up build environment"
msgstr "## ビルド環境のセットアップ"

msgid ""
"It's recommended that you build both PostgreSQL and PGroonga with debug "
"options."
msgstr ""
"PostgreSQLもPGroonaもどちらもデバッグオプション付きでビルドすることをオススメ"
"します。"

msgid ""
"It's better that you [build Groonga][groonga-build] with debug options too. "
"You can use `cmake --preset=debug-maximum ...` for it."
msgstr ""
"デバッグオプション付きで[Groongaもビルド][groonga-build]した方がよいです。そ"
"のためには、`cmake --preset=debug-maximum ...`を使えます。"

msgid ""
"If you use [packaged Groonga][groonga-install], you need to install "
"development package. It's `libgroonga-dev` for Debian family distribution "
"and `groonga-devel` for Red Hat family distribution."
msgstr ""
"[Groongaのパッケージ][groonga-install]を使う場合は、開発用パッケージをインス"
"トールする必要があります。Debian系のディストリビューションでは`libgroonga-"
"dev`で、Red Hat系のディストリビューションでは`groonga-devel`です。"

msgid ""
"You need to install `token_fitlers/stem` Groonga plugin to run all tests. "
"You can install it by `groonga-token-filter-stem` package."
msgstr ""
"すべてのテストを実行するためには`token_fitlers/stem`というGroongaのプラグイン"
"をインストールする必要があります。`groonga-token-filter-stem`パッケージをイン"
"ストールするとインストールできます。"

msgid "## How to build PostgreSQL"
msgstr "## PostgreSQLのビルド方法"

msgid ""
"Download source from [the PostgreSQL site][postgresql-source-download]. Here "
"are command lines to download the source of PostgreSQL {{ site."
"development_postgresql_version }} and extract it:"
msgstr ""
"[PostgreSQLのサイト][postgresql-source-download]からソースをダウンロードしま"
"す。以下はPostgreSQL {{ site.development_postgresql_version }}のソースをダウ"
"ンロードして展開するコマンドラインです。"

msgid ""
"```bash\n"
"wget https://ftp.postgresql.org/pub/source/v{{ site."
"development_postgresql_version }}/postgresql-{{ site."
"development_postgresql_version }}.tar.bz2\n"
"tar xf postgresql-{{ site.development_postgresql_version }}.tar.bz2\n"
"```"
msgstr ""

msgid ""
"Run `meson setup` with `--buildtype=debug` argument. It enables debug build. "
"`--prefix=/tmp/local` is optional:"
msgstr ""
"`--buildtype=debug`引数付きで`meson setup`を実行します。これでデバッグビルド"
"になります。`--prefix=/tmp/local`は指定してもしなくてもどちらでもよいです。"

msgid ""
"```bash\n"
"meson setup \\\n"
"  --buildtype=debug \\\n"
"  --prefix=/tmp/local \\\n"
"  postgresql-{{ site.development_postgresql_version }}.build \\\n"
"  postgresql-{{ site.development_postgresql_version }}\n"
"```"
msgstr ""

msgid "Build and install PostgreSQL:"
msgstr "PostgreSQLをビルドしてインストールします。"

msgid ""
"```bash\n"
"meson compile -C postgresql-{{ site.development_postgresql_version }}.build\n"
"meson install -C postgresql-{{ site.development_postgresql_version }}.build\n"
"```"
msgstr ""

msgid "Initialize and run PostgreSQL:"
msgstr "PostgreSQLを初期化して実行します。"

msgid ""
"```bash\n"
"mkdir -p /tmp/local/var/lib\n"
"/tmp/local/bin/initdb \\\n"
"  --locale C \\\n"
"  --encoding UTF-8 \\\n"
"  --set=enable_partitionwise_join=on \\\n"
"  --set=max_prepared_transactions=1 \\\n"
"  --set=random_page_cost=0 \\\n"
"  -D /tmp/local/var/lib/postgresql\n"
"/tmp/local/bin/postgres -D /tmp/local/var/lib/postgresql\n"
"```"
msgstr ""

msgid ""
"The following one liner is useful to reset all PostgreSQL related data. You "
"store the one liner in your shell history, you can rerun the one linear "
"quickly:"
msgstr ""
"以下のワンライナーはPostgreSQL関連のすべてのデータをリセットするときに便利で"
"す。このワンライナーをシェルのヒストリーに入れておけば、すぐにこのワンライ"
"ナーを再実行できます。"

msgid ""
"```bash\n"
"rm -rf /tmp/local/var/lib/postgresql && \\\n"
"  mkdir -p /tmp/local/var/lib/postgresql &&\n"
"  /tmp/local/bin/initdb \\\n"
"    --locale C \\\n"
"    --encoding UTF-8 \\\n"
"    --set=enable_partitionwise_join=on \\\n"
"    --set=max_prepared_transactions=1 \\\n"
"    --set=random_page_cost=0 \\\n"
"    -D /tmp/local/var/lib/postgresql && \\\n"
" /tmp/local/bin/postgres -D /tmp/local/var/lib/postgresql\n"
"```"
msgstr ""

msgid "## Prepare your fork repository"
msgstr "## フォークリポジトリーの準備"

msgid ""
"You need to fork <https://github.com/pgroonga/pgroonga/> for development. "
"You will open a pull request from your fork repository later. See also "
"GitHub documents:"
msgstr ""
"開発するために<https://github.com/pgroonga/pgroonga/>をフォークする必要があり"
"ます。後でフォークしたリポジトリーからプルリクエストを作るかもしれません。"
"GitHubのドキュメントも参照してください。"

msgid ""
"* <https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/"
"working-with-forks>"
msgstr ""
"* <https://docs.github.com/ja/pull-requests/collaborating-with-pull-requests/"
"working-with-forks>"

msgid ""
"* <https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/"
"proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-"
"from-a-fork>"
msgstr ""
"* <https://docs.github.com/ja/pull-requests/collaborating-with-pull-requests/"
"proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-"
"from-a-fork>"

msgid "Here are command lines to clone your fork repository:"
msgstr "フォークしたリポジトリーをクローンするコマンドラインは次のとおりです。"

msgid ""
"```bash\n"
"git clone --recursive git@github.com:${YOUR_GITHUB_ACCOUNT}/pgroonga.git\n"
"cd pgroonga\n"
"```"
msgstr ""

msgid "## How to build PGroonga and run tests"
msgstr "## PGroongaをビルドしてテストを実行する方法"

msgid ""
"You can use the following command line to build PGroonga and run PGroonga "
"tests:"
msgstr ""
"PGroongaをビルドしてPGroongaのテストを実行するには次のコマンドラインを使いま"
"す。"

msgid ""
"```bash\n"
"HAVE_XXHASH=1 test/run-sql-test.sh\n"
"```"
msgstr ""

msgid "PGroonga has two test types:"
msgstr "PGroongaのテストは2種類あります。"

msgid "  * SQL based regression tests"
msgstr "  * SQLベースのリグレッションテスト"

msgid "  * Complex tests that can't be implemented only with SQL"
msgstr "  * SQLだけでは実装できない複雑なテスト"

msgid ""
"Normally, you only use the former. `test/run-sql-test.sh` is the test runner "
"for the former. It builds and installs PGroonga and runs SQL based "
"regression tests."
msgstr ""
"通常、前者だけを使います。`test/run-sql-test.sh`は前者用のテストランナーで"
"す。PGroongaをビルド・インストールしてSQLベースのリグレッションテストを実行し"
"ます。"

msgid "See also [test](test.html)."
msgstr "[テスト](test.html)も読んでください。"

msgid "[postgresql-source-download]:https://www.postgresql.org/ftp/source/"
msgstr ""

msgid "[groonga-build]:https://groonga.org/docs/install/cmake.html"
msgstr "[groonga-build]:https://groonga.org/ja/docs/install/cmake.html"

msgid "[groonga-install]:https://groonga.org/docs/install.html"
msgstr "[groonga-install]:https://groonga.org/ja/docs/install.html"
