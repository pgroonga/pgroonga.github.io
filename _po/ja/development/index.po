msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: Development\n"
"---"
msgstr ""
"---\n"
"title: 開発\n"
"---"

msgid "# Development"
msgstr "# 開発"

msgid "This document describes how to develop PGroonga."
msgstr "このドキュメントではPGroongaの開発方法を説明します。"

msgid "## Build"
msgstr "## ビルド"

msgid ""
"It's recommended that you build both PostgreSQL and PGroonga with debug option"
"s."
msgstr "PostgreSQLもPGroonaもどちらもデバッグオプション付きでビルドすることをオススメします。"

msgid ""
"It's better that you [build Groonga][groonga-build] with debug options (Groong"
"a's `configure` provides `--enable-debug` option) too. If you use [packaged Gr"
"oonga][groonga-install], you need to install development package. It's `libgro"
"onga-dev` for Debian family distribution and `groonga-devel` for Red Hat famil"
"y distribution."
msgstr ""
"Groongaもデバッグオプション（Groongaの`configure`には`--enable-debug`オプションがある）で[ビルド][groonga"
"-build]した方が便利なことが多いです。[Groongaのパッケージ][groonga-install]を使う場合は、開発用パッケージをインストールする"
"必要があります。Debian系のディストリビューションでは`libgroonga-dev`で、Red Hat系のディストリビューションでは`groonga-"
"devel`です。"

msgid ""
"You need to install `token_fitlers/stem` Groonga plugin to run all tests. You "
"can install it by `groonga-token-filter-stem` package."
msgstr ""
"すべてのテストを実行するためには`token_fitlers/stem`というGroongaのプラグインをインストールする必要があります。`groonga-"
"token-filter-stem`パッケージをインストールするとインストールできます。"

msgid "### How to build PostgreSQL"
msgstr "### PostgreSQLのビルド方法"

msgid ""
"Download source from [the PostgreSQL site][postgresql-source-download]. Here a"
"re command lines to download the source of PostgreSQL {{ site.development_post"
"gresql_version }} and extract it:"
msgstr ""
"[PostgreSQLのサイト][postgresql-source-download]からソースをダウンロードします。以下はPostgreSQL {{ s"
"ite.development_postgresql_version }}のソースをダウンロードして展開するコマンドラインです。"

msgid ""
"```console\n"
"% wget https://ftp.postgresql.org/pub/source/v{{ site.development_postgresql_v"
"ersion }}/postgresql-{{ site.development_postgresql_version }}.tar.bz2\n"
"% tar xf postgresql-{{ site.development_postgresql_version }}.tar.bz2\n"
"% cd postgresql-{{ site.development_postgresql_version }}\n"
"```"
msgstr ""

msgid ""
"Run `configure` with `CFLAGS=\"-O0 -g3\"` argument. It enables debug build. `--p"
"refix=/tmp/local` is optional:"
msgstr ""
"`CFLAGS=\"-O0 -g3\"`引数付きで`configure`を実行します。これでデバッグビルドになります。`--prefix=/tmp/local`"
"は指定してもしなくてもどちらでもよいです。"

msgid ""
"```console\n"
"% ./configure CFLAGS=\"-O0 -g3\" --prefix=/tmp/local\n"
"```"
msgstr ""

msgid "Build and install PostgreSQL:"
msgstr "PostgreSQLをビルドしてインストールします。"

msgid ""
"```console\n"
"% make -j$(nproc) > /dev/null\n"
"% make install > /dev/null\n"
"```"
msgstr ""

msgid "Initialize and run PostgreSQL:"
msgstr "PostgreSQLを初期化して実行します。"

msgid ""
"```console\n"
"% mkdir -p /tmp/local/var/lib\n"
"% /tmp/local/bin/initdb --locale C --encoding UTF-8 -D /tmp/local/var/lib/post"
"gresql\n"
"% /tmp/local/bin/postgres -D /tmp/local/var/lib/postgresql\n"
"```"
msgstr ""

msgid ""
"The following one liner is useful to reset all PostgreSQL related data. You st"
"ore the one liner in your shell history, you can rerun the one linear quickly:"
msgstr ""
"以下のワンライナーはPostgreSQL関連のすべてのデータをリセットするときに便利です。このワンライナーをシェルのヒストリーに入れておけば、すぐにこのワン"
"ライナーを再実行できます。"

msgid ""
"```console\n"
"% rm -rf /tmp/local/var/lib/postgresql && \\\n"
"    mkdir -p /tmp/local/var/lib/postgresql &&\n"
"    /tmp/local/bin/initdb \\\n"
"      --locale C \\\n"
"      --encoding UTF-8 \\\n"
"      -D /tmp/local/var/lib/postgresql && \\\n"
"   /tmp/local/bin/postgres -D /tmp/local/var/lib/postgresql\n"
"```"
msgstr ""

msgid "### How to build and test PGroonga"
msgstr "### PGroongaのビルド・テスト方法"

msgid ""
"It's recommended that you use the latest PGroonga instead of released PGroonga"
". Here are command lines to clone the latest PGroonga source:"
msgstr "リリース版のPGroongaではなく最新のPGroongaを使うことをオススメします。以下は最新のPGroongaのソースをクローンするコマンドラインです。"

msgid ""
"```console\n"
"% git clone --rerursive git@github.com:pgroonga/pgroonga.git\n"
"% cd pgroonga\n"
"```"
msgstr ""

msgid "PGroonga has two test types:"
msgstr "PGroongaのテストは2種類あります。"

msgid "  * SQL based regression tests"
msgstr "  * SQLベースのリグレッションテスト"

msgid "  * Ruby and SQL based [`pgroonga_check`][pgroonga-check] tests"
msgstr "  * RubyとSQLを使った[`pgroonga_check`][pgroonga-check]のテスト"

msgid ""
"Normally, you only use the former. `test/run-sql-test.sh` is the test runner f"
"or the former. It builds and installs PGroonga and runs SQL based regression t"
"ests. `PATH=/tmp/local/bin:$PATH` is needed because PostgreSQL is built with `"
"--prefix=/tmp/local`. `pg_config` exists in `/tmp/local/bin`:"
msgstr ""
"通常、前者だけを使います。`test/run-sql-test.sh`は前者用のテストランナーです。このスクリプトはPGroongaをビルド・インストールし"
"、続けてSQLベースのリグレッションテストも実行します。`PATH=/tmp/local/bin:$PATH`が必要なのはPostgreSQLを`--pre"
"fix=/tmp/local`オプションを指定してビルドしたからです。この場合は`pg_config`は`/tmp/local/bin`にあります。"

msgid ""
"```console\n"
"% PATH=/tmp/local/bin:$PATH test/run-sql-test.sh\n"
"```"
msgstr ""

msgid "## Test"
msgstr "## テスト"

msgid ""
"You should create a regression test when you implement a new feature or fix a "
"bug."
msgstr "新しい機能を実装した時・バグを直した時は、リグレッションテストを作ります。"

msgid "### Summary"
msgstr "### 概要"

msgid ""
"Regression tests exist under `sql/` directory. For example, `sql/full-text-sea"
"rch/text/single/match-v2/indexscan.sql` is a test for the following case:"
msgstr ""
"リグレッションテストは`sql/`ディレクトリー以下にあります。例えば、`sql/full-text-search/text/single/match-v2"
"/indexscan.sql`は次のケース用のテストです。"

msgid "  * Full text search"
msgstr "  * 全文検索"

msgid "  * `text` type"
msgstr "  * `text`型"

msgid "  * [`&@`][match-v2] (v2 match operator)"
msgstr "  * [`&@`][match-v2]（マッチ演算子v2）"

msgid "  * Index scan"
msgstr "  * インデックススキャン"

msgid ""
"The expected outputs exist under `expected/` directory. Directory structure is"
" the same as `sql/` but the expected outputs use `.out` extension such as `exp"
"ected/full-text-search/text/single/match-v2/indexscan.out`."
msgstr ""
"出力の期待値は`expected/`ディレクトリー以下にあります。ディレクトリー構造は`sql/`と同じですが、拡張子は`.out`になります。たとえば、`"
"expected/full-text-search/text/single/match-v2/indexscan.out`となります。"

msgid "### How to create a regression test"
msgstr "### リグレッションテストの作成方法"

msgid ""
"You create a new file under `sql/` and put test scenario in SQL into the file."
" Then, run the file like the following:"
msgstr "新しいファイルを`sql/`以下に作り、SQLで作ったテストシナリオをそのファイルに書きます。それからこのファイルを次のように実行します。"

msgid ""
"```console\n"
"% PATH=/tmp/local/bin:$PATH test/run-sql-test.sh sql/.../XXX.sql\n"
"```"
msgstr ""

msgid ""
"The newly created test is failed and `test/run-sql-test.sh` shows the output o"
"f the test scenario. If the output is correct, copy the output and paste it to"
" `expected/.../XXX.out`."
msgstr ""
"この新しく作ったテストは失敗します。`test/run-sql-test.sh`はこのテストシナリオの出力を表示します。出力が正しければ、出力をコピーして`"
"expected/.../XXX.out`に貼ります。"

msgid "You should confirm the test is passed by updating `expected/.../XXX.out`:"
msgstr "`expected/.../XXX.out`を更新してテストがパスするようになったかを確認してください。"

msgid "## [How to relase](release.html)"
msgstr "## [リリース方法](release.html)"

msgid "[postgresql-source-download]:https://www.postgresql.org/ftp/source/"
msgstr ""

msgid "[groonga-build]:http://groonga.org/docs/install/others.html"
msgstr "[groonga-build]:http://groonga.org/ja/docs/install/others.html"

msgid "[groonga-install]:http://groonga.org/docs/install.html"
msgstr "[groonga-install]:http://groonga.org/ja/docs/install.html"

msgid "[pgroonga-check]:../reference/modules/pgroonga-check.html"
msgstr ""

msgid "[match-v2]:../reference/operators/match-v2.html"
msgstr ""
