msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"PO-Revision-Date: 2023-10-02 17:02+0900\n"

msgid ""
"---\n"
"title: How to use PGroonga with Laravel\n"
"---"
msgstr ""
"---\n"
"title: PGroongaをLaravelと一緒に使う方法\n"
"---"

msgid "# How to use PGroonga with Laravel"
msgstr "# PGroongaをLaravelと一緒に使う方法"

msgid ""
"In this guide we will walk through building a Laravel application from "
"scratch with PGroonga."
msgstr "ここではLaravelでPGroongaを使うアプリを一から作っていきます。"

msgid "## Installation"
msgstr "## インストール"

msgid "### Installing Laravel"
msgstr "### Laravelのインストール"

msgid ""
"**NOTE**: This tutorial assumes you have already set up your environment for "
"Laravel, PostgreSQL and PGroonga"
msgstr ""
"**注意**: このチュートリアルは既にLaravelとPostgreSQLとPGroongaが使える前提と"
"なります。"

msgid ""
"If you have already installed PHP and Composer on your local machine, you "
"may create a new Laravel project via Composer:"
msgstr ""
"PHPとComposerがインストール済みの場合は、Composerを使い新規のLaravelプロジェ"
"クトを作ります。"

msgid ""
"```shell\n"
"composer create-project laravel/laravel pgroonga_laravel\n"
"```"
msgstr ""

msgid ""
"After the project has been created, start Laravel's local development server "
"using the Laravel's Artisan CLI serve command:"
msgstr ""
"プロジェクト生成後は下記のArtisan CLIコマンドでローカル環境のLaravelが立ち上"
"げ可能です。"

msgid ""
"```shell\n"
"cd pgroonga_laravel\n"
"php artisan serve\n"
"```"
msgstr ""

msgid ""
"Once you have started the Artisan development server, your application will "
"be accessible in your web browser at [http://localhost:8000](http://"
"localhost:8000)."
msgstr ""
"起動後はブラウザで[http://localhost:8000](http://localhost:8000)にアクセスす"
"るとこのアプリケーションを使えます。"

msgid "### Installing Laravel Breeze"
msgstr "### Laravel Breezeのインストール"

msgid ""
"Next, we will install Laravel Breeze, a minimal, simple implementation of "
"all of Laravel's authentication features, including login, registration, "
"password reset, email verification, and password confirmation. It comes with "
"pre-designed custom blade components and TailwindCSS so that it makes easier "
"to design a web page quickly."
msgstr ""
"次にLaravel Breezeをインストールします。ログインやユーザ登録、パスワードリ"
"セットやEmail確認機能、パスワード確認機能を兼ね備えたシンプルな認証パッケージ"
"です。TailwindCSSによりデザインされたBladeテンプレートが準備されているためWeb"
"ページのデザインを素早く作ることができます。"

msgid "To install Laravel Breeze, just run the following commands:"
msgstr "次のコマンドを実行してLaravel Breezeをインストールします。<"

msgid ""
"```shell\n"
"composer require laravel/breeze --dev\n"
"php artisan breeze:install blade\n"
"```"
msgstr ""

msgid "### Set up database"
msgstr "### データベースのセットアップ"

msgid "Let's create a PostgreSQL database for this Laravel application."
msgstr "Laravel用にPostgreSQLのデータベースを作りましょう。"

msgid ""
"```shell\n"
"createdb pgroonga_laravel\n"
"```"
msgstr ""

msgid ""
"To instruct Laravel to use PostgreSQL instead of default MySQL, update your "
"new application's `.env` file and set environment variables like this:"
msgstr ""
"LaravelでデフォルトのDBはMySQLですが、PostgreSQLを使うために`.env`ファイルを"
"次のように設定します:"

msgid ""
"```ini\n"
"DB_CONNECTION=pgsql\n"
"DB_HOST=127.0.0.1\n"
"DB_PORT=5432\n"
"DB_DATABASE=pgroonga_laravel\n"
"DB_USERNAME=postgres\n"
"DB_PASSWORD=postgres\n"
"```"
msgstr ""

msgid ""
"If you're using different PostgreSQL username and password, change them "
"according to your settings."
msgstr ""
"`DB_USERNAME` と `DB_PASSWORD` は、実際に使っているPostgreSQLのユーザ名とパス"
"ワードに変更してください。"

msgid "### Creating a Blog"
msgstr "### ブログの作成"

msgid ""
"You're now ready to start building your new application! In this tutorial, "
"we will create a blog with fake data seeder and search through them using "
"PGroonga."
msgstr ""
"これで新しいアプリを作る準備ができました！このチュートリアルではブログアプリ"
"を作ります。サンプルデータを流し込む機能とPGroongaを使った検索機能を実装しま"
"す。"

msgid "### Models, migrations, and controllers"
msgstr "### モデルとマイグレーションとコントローラの作成"

msgid ""
"To make a blog, we will need to create a model, migrations, and controllers."
msgstr "ブログを作るためのモデルとマイグレーションとコントローラを作成します。"

msgid ""
"Since the blog has posts, we create Post model for it. To create a model, "
"just run the following command:"
msgstr ""
"ブログは記事が必要なのでPostモデルを作ります。モデルを作るためには次のコマン"
"ドを実行します。"

msgid ""
"```shell\n"
"php artisan make:model -mc Post\n"
"```"
msgstr ""

msgid "This command will create three files for you:"
msgstr "このコマンドは次のファイルを生成します。"

msgid "* `app/Models/Post.php` - The Eloquent model."
msgstr "* `app/Models/Post.php` - Eloquentのモデルです。"

msgid ""
"* `database/migrations/<timestamp>_create_posts_table.php` - The database "
"migration that will create your database table."
msgstr ""
"* `database/migrations/<timestamp>_create_posts_table.php` - データベースの"
"テーブルを生成するマイグレーションファイルです。"

msgid ""
"* `app/Http/Controller/PostController.php` - The HTTP controller that will "
"take incoming requests and return responses."
msgstr ""
"* `app/Http/Controller/PostController.php` - HTTPのリクエストやレスポンスを取"
"り扱うコントローラです。"

msgid "#### Model"
msgstr "#### モデル"

msgid "Let's add search function to our Post model `app/Models/Post.php`."
msgstr "Postモデルの`app/Models/Post.php`に検索機能を作りましょう。"

msgid "Before part is original state, and After is modified version:"
msgstr "元ファイルと変更後のファイルです。"

msgid "Before:"
msgstr "変更前："

msgid ""
"```php\n"
"<?php"
msgstr ""

msgid "namespace App\\Models;"
msgstr ""

msgid ""
"use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n"
"use Illuminate\\Database\\Eloquent\\Model;"
msgstr ""

msgid ""
"class Post extends Model\n"
"{\n"
"    use HasFactory;\n"
"}\n"
"```"
msgstr ""

msgid "After:"
msgstr "変更後："

msgid ""
"class Post extends Model\n"
"{\n"
"    use HasFactory;"
msgstr ""

msgid ""
"    public static function search($keyword)\n"
"    {\n"
"        if(empty($keyword)){\n"
"            return static::query();\n"
"        }"
msgstr ""

msgid "        $search_columns = ['title', 'body'];"
msgstr ""

msgid "        $search_query = static::query();"
msgstr ""

msgid ""
"        foreach($search_columns as $column){\n"
"            $search_query->orWhereRaw(\"$column &@~ ?\", [$keyword]);\n"
"        }"
msgstr ""

msgid ""
"        return $search_query;\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid "#### Migration"
msgstr "#### マイグレーション"

msgid ""
"Now we create a database migration for our Post model `database/migrations/"
"<timestamp>_create_posts_table.php`."
msgstr ""
"Postモデル`database/migrations/<timestamp>_create_posts_table.php`用のデータ"
"ベースマイグレーションを作ります。"

msgid "Here are its original state and after state we modified it:"
msgstr "以下が変更前と変更後の内容です。"

msgid ""
"use Illuminate\\Database\\Migrations\\Migration;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\Schema;"
msgstr ""

msgid ""
"return new class extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     */\n"
"    public function up(): void\n"
"    {\n"
"        Schema::create('posts', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->timestamps();\n"
"        });\n"
"    }"
msgstr ""

msgid ""
"    /**\n"
"     * Reverse the migrations.\n"
"     */\n"
"    public function down(): void\n"
"    {\n"
"        Schema::dropIfExists('posts');\n"
"    }\n"
"};\n"
"```"
msgstr ""

msgid ""
"use Illuminate\\Database\\Migrations\\Migration;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\DB;  // Don't forget to add this\n"
"use Illuminate\\Support\\Facades\\Schema;"
msgstr ""
"use Illuminate\\Database\\Migrations\\Migration;\n"
"use Illuminate\\Database\\Schema\\Blueprint;\n"
"use Illuminate\\Support\\Facades\\DB;  // ここを忘れずに\n"
"use Illuminate\\Support\\Facades\\Schema;"

msgid ""
"return new class extends Migration\n"
"{\n"
"    /**\n"
"     * Run the migrations.\n"
"     */\n"
"    public function up(): void\n"
"    {\n"
"        Schema::create('posts', function (Blueprint $table) {\n"
"            $table->id();\n"
"            $table->text('title');\n"
"            $table->text('body');\n"
"            $table->timestamps();\n"
"        });"
msgstr ""

msgid ""
"        Schema::table('posts', function (Blueprint $table) {\n"
"            DB::statement('CREATE EXTENSION IF NOT EXISTS pgroonga');\n"
"            DB::statement('CREATE INDEX pgrn_posts_id_index ON posts USING "
"pgroonga (id)');\n"
"            DB::statement('CREATE INDEX pgrn_posts_title_index ON posts "
"USING pgroonga (title)');\n"
"            DB::statement('CREATE INDEX pgrn_posts_body_index ON posts USING "
"pgroonga (body)');\n"
"        });\n"
"    }"
msgstr ""

msgid ""
"    /**\n"
"     * Reverse the migrations.\n"
"     */\n"
"    public function down(): void\n"
"    {\n"
"        DB::statement('DROP INDEX pgrn_posts_id_index');\n"
"        DB::statement('DROP INDEX pgrn_posts_title_index');\n"
"        DB::statement('DROP INDEX pgrn_posts_body_index');\n"
"        DB::statement('DROP EXTENSION IF EXISTS pgroonga');\n"
"        Schema::dropIfExists('posts');\n"
"    }\n"
"};\n"
"```"
msgstr ""

msgid "#### Controller"
msgstr "#### コントローラ"

msgid ""
"Let's add our Post Controller to handle user requests `app/Http/Controller/"
"PostController.php`."
msgstr ""
"リクエストを捌くPostコントローラ`app/Http/Controller/PostController.php`を作"
"ります。"

msgid "namespace App\\Http\\Controllers;"
msgstr ""

msgid "use Illuminate\\Http\\Request;"
msgstr ""

msgid ""
"class PostController extends Controller\n"
"{\n"
"    //\n"
"}\n"
"```"
msgstr ""

msgid ""
"use Illuminate\\Http\\Request;\n"
"use Illuminate\\View\\View;"
msgstr ""

msgid ""
"class PostController extends Controller\n"
"{\n"
"    public function index() : View\n"
"    {\n"
"        $posts = \\App\\Models\\Post::query()->paginate(10);"
msgstr ""

msgid ""
"        return view('posts.index', compact('posts'));\n"
"    }"
msgstr ""

msgid ""
"    public function search(Request $request) : View\n"
"    {\n"
"        $keyword = $request->input('keyword');"
msgstr ""

msgid ""
"        $posts = \\App\\Models\\Post::search($keyword)->paginate(10)-"
">withQueryString();"
msgstr ""

msgid ""
"        return view('posts.index', compact('posts', 'keyword'));\n"
"    }"
msgstr ""

msgid ""
"}\n"
"```"
msgstr ""

msgid "### Routing"
msgstr "### ルート設定"

msgid "We will also need to create URLs for our controller."
msgstr "コントローラで取り扱うURLを作成します。"

msgid "To start with, we are going to enable two routes:"
msgstr "ここでは対応する2つのルートを有効にします。"

msgid "* The `index` route will display our listing of blog posts."
msgstr "* `index`ルートはブログ記事一覧を表示させます。"

msgid "* The `search` route will be used for searching blog posts."
msgstr "* `search`ルートはブログ記事を検索するのに利用されます。"

msgid "Edit `routes/web.php` like this:"
msgstr "`routes/web.php`を次のように編集します:"

msgid ""
"use App\\Http\\Controllers\\ProfileController;\n"
"use Illuminate\\Support\\Facades\\Route;"
msgstr ""

msgid ""
"/*\n"
"|--------------------------------------------------------------------------\n"
"| Web Routes\n"
"|--------------------------------------------------------------------------\n"
"|\n"
"| Here is where you can register web routes for your application. These\n"
"| routes are loaded by the RouteServiceProvider and all of them will\n"
"| be assigned to the \"web\" middleware group. Make something great!\n"
"|\n"
"*/"
msgstr ""

msgid ""
"/* remove\n"
"Route::get('/', function () {\n"
"    return view('welcome');\n"
"});\n"
"*/"
msgstr ""

msgid ""
"Route::get('/',  [\\App\\Http\\Controllers\\PostController::class, "
"'index']) // Add\n"
"    ->name('posts.index'); // Add\n"
"Route::get('/search',  [\\App\\Http\\Controllers\\PostController::class, "
"'search']) // Add\n"
"    ->name('posts.search'); // Add"
msgstr ""

msgid ""
"Route::get('/dashboard', function () {\n"
"    return view('dashboard');\n"
"})->middleware(['auth', 'verified'])->name('dashboard');"
msgstr ""

msgid ""
"Route::middleware('auth')->group(function () {\n"
"    Route::get('/profile', [ProfileController::class, 'edit'])-"
">name('profile.edit');\n"
"    Route::patch('/profile', [ProfileController::class, 'update'])-"
">name('profile.update');\n"
"    Route::delete('/profile', [ProfileController::class, 'destroy'])-"
">name('profile.destroy');\n"
"});"
msgstr ""

msgid ""
"require __DIR__.'/auth.php';\n"
"```"
msgstr ""

msgid "This will create the following routes:"
msgstr "これにより次のルートが作成されます:"

msgid ""
"| Verb | URI         | Action  | Route Name     |\n"
"|------|-------------|---------|----------------|\n"
"| GET  | `/`         | index   | posts.index    |\n"
"| GET  | `/search`   | search  | posts.search   |"
msgstr ""

msgid "### Blade"
msgstr "### Blade"

msgid ""
"Let's create a Blade file that will display the data  returned from `index` "
"and `search` method of our `PostController` class to render a view:"
msgstr ""
"`PostController`の`index`と`search`メソッドから返ってくるデータを表示させるた"
"めのView用のBladeファイルを作成します:"

msgid ""
"First, we will change Breeze default `resources/views/layouts/guest.blade."
"php` template like this:"
msgstr ""
"最初にBreezeの標準テンプレートである `resources/views/layouts/guest.blade."
"php` を次のように修正します。"

msgid "{% raw %}"
msgstr ""

msgid ""
"```php\n"
"<!-- Line 25 -->\n"
"\t<div class=\"w-full sm:max-w-md mt-6 px-6 py-4 bg-white shadow-md overflow-"
"hidden sm:rounded-lg\">\n"
"\t\t{{ $slot }}\n"
"\t</div>\n"
"```"
msgstr ""

msgid "{% endraw %}"
msgstr ""

msgid ""
"```php\n"
"<!-- Line 25 -->\n"
"\t<div class=\"w-full lg:max-w-6xl mt-6 px-6 py-4 bg-white shadow-md "
"overflow-hidden sm:rounded-lg\">\n"
"\t    {{ $slot }}\n"
"\t</div>\n"
"```"
msgstr ""

msgid ""
"Then, we will create `resources/views/posts/index.blade.php` to display Blog "
"Posts and also provide search features:"
msgstr ""
"次にブログ記事と検索機能を提供する`resources/views/posts/index.blade.php`を作"
"成します:"

msgid ""
"```php\n"
"<x-guest-layout>\n"
"    <div class=\"py-2\">\n"
"        <div class=\"max-w-7xl mx-auto sm:px-6 lg:px-8\">\n"
"            <div class=\"bg-white overflow-hidden shadow-sm sm:rounded-"
"lg\">\n"
"                <div class=\"p-2 bg-white border-b border-gray-200\">"
msgstr ""

msgid ""
"                    <div>\n"
"                        <div class=\"flex w-full justify-between items-"
"center sm:mb-2\">\n"
"                            <h2 class=\"text-3xl font-extrabold tracking-"
"tight text-gray-900 sm:text-4xl sm:mb-4\"><a href=\"/\">PGroonga Laravel</a> "
"</h2>\n"
"                        </div>\n"
"                        <form action=\"{{ route('posts.search') }}\" "
"method=\"GET\">\n"
"                            <div class=\"flex mb-4 justify-between items-"
"center\">\n"
"                                <div class=\"block w-3/4\">\n"
"                                    <div class=\"flex flex-col sm:flex-row "
"justify-start items-center pl-2\">\n"
"                                    <input type=\"search\" name=\"keyword\" "
"class=\"form-control w-full sm:w-5/6 \" type=\"text\" value=\"@if "
"(isset($keyword)) {{ $keyword }} @endif\" placeholder=\"{{ __('Enter search "
"keyword') }}\">\n"
"                                    <button class=\"collapse sm:visible "
"inline-block align-left text-base sm:w-20 rounded-md border border-gray-700 "
"sm:p-2 sm:ml-4\" type=\"submit\">{{ __('Search') }}</button>\n"
"                                    </div>\n"
"                                </div>\n"
"                            </div>\n"
"                        </form>"
msgstr ""

msgid ""
"                        @if($posts ?? false)\n"
"                        <div class=\"container\">\n"
"                            <div class=\"bg-white\">\n"
"                              <div class=\"max-w-2xl mx-auto px-4 grid items-"
"center grid-cols-1 gap-y-16 gap-x-8 sm:px-6 lg:max-w-7xl lg:px-8 lg:grid-"
"cols-1\">\n"
"                                <div>"
msgstr ""

msgid ""
"                                  <dl class=\"sm:mt-8 grid grid-cols-1 gap-"
"x-6 gap-y-2 grid-cols-1 sm:grid-cols-7 sm:gap-y-2 lg:gap-x-8\">\n"
"                                    <div class=\"border-t border-"
"gray-200\">\n"
"                                      <dt class=\"text-sm sm:text-base sm:"
"font-medium text-gray-900\">\n"
"                                              ID\n"
"                                      </dt>\n"
"                                    </div>"
msgstr ""

msgid ""
"                                    <div class=\"border-t border-gray-200 sm:"
"col-span-2\">\n"
"                                      <dt class=\"text-sm sm:text-base sm:"
"font-medium text-gray-900\">\n"
"                                        {{ __('Title') }}\n"
"                                      </dt>\n"
"                                    </div>"
msgstr ""

msgid ""
"                                    <div class=\"border-t border-gray-200 sm:"
"col-span-4\">\n"
"                                      <dt class=\"text-sm sm:text-base font-"
"medium text-gray-900\">\n"
"                                        {{ __('Body') }}\n"
"                                      </dt>\n"
"                                    </div>"
msgstr ""

msgid ""
"                                    @foreach($posts as $post)\n"
"                                        <div class=\"border-t border-"
"gray-200 pt-1\">\n"
"                                            <dd class=\"sm:mt-2 text-sm text-"
"gray-500\">\n"
"                                                <span class=\"block "
"m-1\">ID: {{ $post->id }}</span>\n"
"                                            </dd>\n"
"                                        </div>"
msgstr ""

msgid ""
"                                        <div class=\"border-t border-"
"gray-200 pt-1 sm:col-span-2\">\n"
"                                            <dd class=\"sm:mt-2 text-sm text-"
"gray-500\">\n"
"                                                <span class=\"block "
"m-1\">{{ $post->title }}</span>\n"
"                                            </dd>\n"
"                                        </div>"
msgstr ""

msgid ""
"                                        <div class=\"border-t border-"
"gray-200 pt-1 sm:col-span-4\">\n"
"                                          <dd class=\"sm:mt-2 text-sm text-"
"gray-500\">\n"
"                                              <span class=\"block m-1 line-"
"break\">{{ $post->body }}</span>\n"
"                                          </dd>\n"
"                                        </div>"
msgstr ""

msgid ""
"                                    @endforeach\n"
"                                  </dl>\n"
"                                </div>"
msgstr ""

msgid ""
"                                  <div>\n"
"                                    {{ $posts->links() }}\n"
"                                  </div>"
msgstr ""

msgid ""
"                              </div>\n"
"                            </div>\n"
"                        </div>\n"
"                        @endif"
msgstr ""

msgid "                    </div>"
msgstr ""

msgid ""
"                </div>\n"
"            </div>\n"
"        </div>\n"
"    </div>\n"
"</x-guest-layout>\n"
"```"
msgstr ""

msgid "### Factory"
msgstr "### ファクトリー"

msgid ""
"To create dummy data for this application, you need to create a Factory for "
"Post Model."
msgstr "Postモデル用のダミーデータを生成するファクトリーを作成します。"

msgid ""
"Run following command which create a `database/factories/PostFactory.php` "
"file."
msgstr ""
"次のコマンドを実行し`database/factories/PostFactory.php`ファイルを作成しま"
"す。"

msgid ""
"```shell\n"
"php artisan make:factory PostFactory\n"
"```"
msgstr ""

msgid ""
"Let's add some code to generate a fake data for Post Model. Here are before "
"and after:"
msgstr ""
"Postモデル用のダミーデータを生成するコードを書きます。変更前と変更後になりま"
"す。"

msgid "namespace Database\\Factories;"
msgstr ""

msgid "use Illuminate\\Database\\Eloquent\\Factories\\Factory;"
msgstr ""

msgid ""
"/**\n"
" * @extends "
"\\Illuminate\\Database\\Eloquent\\Factories\\Factory<\\App\\Models\\Post>\n"
" */\n"
"class PostFactory extends Factory\n"
"{\n"
"    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function definition(): array\n"
"    {\n"
"        return [\n"
"            //\n"
"        ];\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"/**\n"
" * @extends "
"\\Illuminate\\Database\\Eloquent\\Factories\\Factory<\\App\\Models\\Post>\n"
" */\n"
"class PostFactory extends Factory\n"
"{\n"
"    /**\n"
"     * Define the model's default state.\n"
"     *\n"
"     * @return array<string, mixed>\n"
"     */\n"
"    public function definition(): array\n"
"    {\n"
"        return [\n"
"            'title' => fake()->realText(20),\n"
"            'body' => fake()->realText(200),\n"
"        ];\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid "### Database Seeder"
msgstr "### データベースデータ流し込み機能(シーダー)"

msgid ""
"Now you need to tell the database seeder class to use the factory we've "
"created. We will modify the seeder to create 200,000 dummy blog posts:"
msgstr ""
"データベースへのデータ流し込み機能（シーダー）に作成したファクトリーを使うよ"
"うに設定します。サンプルブログ記事を20万件程流します:"

msgid "namespace Database\\Seeders;"
msgstr ""

msgid ""
"// use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\n"
"use Illuminate\\Database\\Seeder;"
msgstr ""

msgid ""
"class DatabaseSeeder extends Seeder\n"
"{\n"
"    /**\n"
"     * Seed the application's database.\n"
"     */\n"
"    public function run(): void\n"
"    {\n"
"        // \\App\\Models\\User::factory(10)->create();"
msgstr ""

msgid ""
"        // \\App\\Models\\User::factory()->create([\n"
"        //     'name' => 'Test User',\n"
"        //     'email' => 'test@example.com',\n"
"        // ]);\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid ""
"        // \\App\\Models\\User::factory()->create([\n"
"        //     'name' => 'Test User',\n"
"        //     'email' => 'test@example.com',\n"
"        // ]);"
msgstr ""

msgid "        echo \"Now you need to wait for few minitues \\n\";"
msgstr ""

msgid ""
"        for($i =0; $i<2000; $i++)\n"
"        {\n"
"            \\App\\Models\\Post::factory()->count(100)->create();\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

msgid "### Run migration and seed sample data"
msgstr "### マイグレーション実行とサンプルデータの流し込み"

msgid ""
"Following command will run the migration to PostgreSQL then seed fake data "
"to it."
msgstr ""
"次のコマンドを実行してPostgreSQLにマイグレーションとサンプルデータの流し込み"
"を行います。"

msgid ""
"```shell\n"
"php arrtisan migrate\n"
"php artisan db:seed\n"
"```"
msgstr ""

msgid "### Let's test it"
msgstr "### テストしてみましょう"

msgid "First, you need to build a css. Just run the following command."
msgstr "最初に、CSSを生成するために次のコマンドを実行します。"

msgid ""
"```shell\n"
"npm run build\n"
"```"
msgstr ""

msgid "Then start the laravel by running follwoing command."
msgstr "Then start the laravel by running follwoing command."

msgid ""
"```shell\n"
"php artisan serve\n"
"```"
msgstr ""

msgid ""
"Now you can access the application in your web browser at: [http://"
"localhost:8000](http://localhost:8000)"
msgstr ""
"ブラウザで[http://localhost:8000](http://localhost:8000)にアクセスしてLaravel"
"の動作確認をします。"

msgid "![Laravel sample 1]({% link /images/laravel/laravel1.png %})"
msgstr "![Laravelサンプル1]({% link /images/laravel/laravel1.png %})"

msgid "### Search Function"
msgstr "### 検索機能"

msgid ""
"Good thing about PGroonga is, unlike popular RDB like MySQL and PostgreSQL "
"which only can use indexes for prefix match search, it can also use indexes "
"for full-text partial match search! Not only that, you can get AND search "
"and OR search for free! Just type your keyword separate with space, you get "
"AND search. If you separate words with OR (capital letter), you get OR "
"search."
msgstr ""
"MySQLやPostgreSQLも前方一致ならインデックスを使ってLIKEで高速検索できますが、"
"中間一致ではインデックスを使ってくれません。PGroongaなら前方一致でも中間一致"
"でも、インデックスを使って`LIKE`で高速検索できます！それだけではなく、特に苦"
"労することなくAND検索やOR検索を使えます！スペースでキーワードを区切るとAND検"
"索に、大文字のORで区切るとOR検索となります。"

msgid ""
"For example: if you search with space separated keywords like `alice king "
"turtle queen`, then it will perform an `AND` search and return the posts "
"that contains all the keyword you entered. Notice that, although entered "
"keywords are all lower cased, but it will hit all the letters, no case "
"sensitive! And it use indexes so that no sequential search will be "
"performed. It responses quickly and saves a lot of database cpu power."
msgstr ""
"たとえば`alice king turtle queen`をキーワードとして検索すると、これら全ての単"
"語を含む`AND`検索として機能します。しかも入力したキーワードが全て小文字でも、"
"大文字小文字に関わらずにヒットさせます！インデックスを利用して検索するので"
"シーケンシャルサーチとなりません。反応も高速であるためデータベースのCPU使用率"
"を抑えることができます。"

msgid "![Laravel sample 2]({% link /images/laravel/laravel2.png %})"
msgstr "![Laravelサンプル2]({% link /images/laravel/laravel2.png %})"

msgid ""
"Here is `OR` search, using capital letter `OR`, it searches blog posts that "
"contains either `caterpillar` or `queen`."
msgstr ""
"こちらは`OR`検索の例です。大文字の`OR`を使います。`caterpillar`もしくは"
"`queen`を含むブログ記事を検索します。"

msgid "![Laravel sample 3](%{ link /images/laravel/laravel3.png %})"
msgstr "![Laravelサンプル3]({% link /images/laravel/laravel3.png %})"

msgid ""
"You can also performe `NOT` search, using `-` sign. For example, if you "
"search `alice -king`, then it will search blog posts that contains `alice` "
"but not `king`."
msgstr ""
"ちなみに`-`記号を使用することで`NOT`検索も可能です。例えば `alice -king`で検"
"索すると`alice`を含み、かつ`king`を含まないブログ記事を検索します。"

msgid ""
"Imagine when you are trying to create same feature using MySQL or PostgreSQL "
"for `AND`, `OR` and `NOT` confitions, you will need to write a lot of code "
"to handle all the cases. But with PGroonga, you get all these for free! And "
"it is fast!"
msgstr ""
"MySQLやPostgreSQLで`AND`、`OR`そして`NOT`検索する機能を実装しようとすると、そ"
"れぞれの条件のために大量のコードを書く必要があります。しかしPGroongaを使うと"
"初めからそれらの機能が使える上、しかも検索が速いのです！"

msgid "### Make Japanese Version"
msgstr "### 日本語化対応させる"

msgid ""
"Simply following next steps and turn this Blog Search Sample in Japanese."
msgstr "次の手順を行うことでブログ検索機能を日本語化することができます。"

msgid "Add language file:"
msgstr "言語ファイルを追加します。"

msgid ""
"```shell\n"
"mkdir lang\n"
"touch lang/ja.json\n"
"```"
msgstr ""

msgid "`lang/ja.json`:"
msgstr ""

msgid ""
"```json\n"
"{\n"
"    \"Title\": \"タイトル\",\n"
"    \"Body\": \"本文\",\n"
"    \"Search\": \"検索\",\n"
"    \"Enter search keyword\": \"検索キーワードを入力\",\n"
"    \"of\": \"件目、全：\",\n"
"    \"per page\": \"毎ページ\",\n"
"    \"results\": \"件\",\n"
"    \"to\": \"から\",\n"
"    \"Showing\": \"表示中：\"\n"
"}\n"
"```"
msgstr ""

msgid "Set locale to Japanese:"
msgstr "ロケールを日本語に変更します。"

msgid "Edit `config/app.php`:"
msgstr "`config/app.php`を編集します。"

msgid ""
"```php\n"
"'locale' => 'ja', // Change from en to ja\n"
"'faker_locale' => 'ja_JP', // Change from en_US to ja_JP\n"
"```"
msgstr ""

msgid "Run fresh migration and database seed again:"
msgstr "マイグレーションとデータ流し込みを再実行します。"

msgid ""
"```shell\n"
"php artisan migrate:fresh --seed\n"
"```"
msgstr ""

msgid "Start Laravel application:"
msgstr "Laravelアプリケーションを起動します。"

msgid ""
"Access the application in your web browser at: [http://localhost:8000]"
"(http://localhost:8000)"
msgstr ""
"ブラウザで[http://localhost:8000](http://localhost:8000)にアクセスします。"

msgid "How cool is this!"
msgstr "これは便利！！"

msgid "![PGroonga Japanese]({% link /images/laravel/laravel-ja1.png %})"
msgstr "![PGroonga日本語版]({% link /images/laravel/laravel-ja1.png %})"
