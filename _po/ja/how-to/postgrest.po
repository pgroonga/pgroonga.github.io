msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: How to use PGroonga with PostgREST\n"
"---"
msgstr ""
"---\n"
"title: PostgRESTでPGroongaを使う方法\n"
"---"

msgid "# How to use PGroonga with PostgREST"
msgstr "# PostgRESTでPGroongaを使う方法"

msgid ""
"Create data in PostgreSQL, provide it as an API using PostgREST, and then easi"
"ly create an **\"API for convenient data search\"**. This is a beginner's guide "
"to PostgREST with PGroonga."
msgstr ""
"PostgRESTを使うことによってPostgreSQLで作ったデータの**\"検索APIを簡単に公開\"**できます。これはそのためのPostgRESTでPG"
"roongaを使うための初心者向けガイドです。"

msgid "## Prepare data on the PostgreSQL side"
msgstr "## PostgreSQL側でのデータの準備"

msgid "Here, we will use PostgreSQL, which is usually available on most computers😏"
msgstr "ここでは大抵どのご家庭のコンピュータにも入っているPostgreSQLを使います😏"

msgid ""
"```sh\n"
"createdb api\n"
"psql api\n"
"```"
msgstr ""
"```sh\n"
"createdb api\n"
"psql api\n"
"```"

msgid "## Create a table and create suitable indexes"
msgstr "## テーブル作成と適切なインデックス作成"

msgid ""
"To make use of the convenient features of PGroonga, creating indexes that matc"
"h the features is crucial."
msgstr "PGroongaの便利な機能を使うには、それらの機能に応じた最適なインデックスを作ることが大変重要となります。"

msgid ""
"In this example, we will create a memo table and create indexes that enable th"
"e following search functionalities for each column:"
msgstr "この例では、memoテーブルを作成し、後に続く検索機能に必要なインデックスをそれぞれのカラムに対して作成して行きます:"

msgid ""
"- Treating hiragana and katakana as equivalent (searching for \"あっぷる\" will matc"
"h both \"あっぷる\" and \"アップル\")."
msgstr "- ひらがなとカタカナを同一視させます (\"あっぷる\"でも\"あっぷる\"と\"アップル\"がヒット)。"

msgid ""
"- Treating hiragana, katakana, and romaji as equivalent (searching for \"de-tab"
"e-su\" will match \"de-tabe-su,\" \"でーたべーす,\" and \"データベース\")."
msgstr ""
"- ひらがなとカタカナとローマ字を同一視させます (\"de-tabe-su\"で検索しても\"de-tabe-su\",\"でーたべーす\",そして \"データベース\""
"がヒットします)。"

msgid ""
"- Treating various long vowel marks as equivalent (treating similar long vowel"
" marks, such as \"-˗֊‐‑‒–⁃⁻₋− ﹣－ ー—―─━ｰ,\" as the same for easier searching)."
msgstr "- 様々な長音記号を同一視させます (\"-˗֊‐‑‒–⁃⁻₋− ﹣－ ー—―─━ｰ,\"を同じ文字として扱います)。"

msgid "Now, let's try it out!"
msgstr "早速やってみましょう！"

msgid ""
"```sql\n"
"CREATE EXTENSION IF NOT EXISTS pgroonga;"
msgstr ""

msgid ""
"CREATE TABLE memos (\n"
"  id integer,\n"
"  title text,\n"
"  content text\n"
");"
msgstr ""

msgid ""
"-- Please don't mind the randomness of the sample text 😗\n"
"INSERT INTO memos VALUES (1, 'PostgreSQLはリレーショナル・データベース管理システムです。','すごいでしょう');\n"
"INSERT INTO memos VALUES (2, 'Groongaは日本語対応の高速な全文検索エンジンです。','スワイショウ');\n"
"INSERT INTO memos VALUES (3, 'PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です"
"。','ハバナイスデー');\n"
"INSERT INTO memos VALUES (4, 'groongaコマンドがあります。','今日はコンバンワこのくにわ');"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_title_search_index ON memos USING pgroonga (title)\n"
"  WITH (\n"
"    normalizers = 'NormalizerNFKC150\n"
"      (\n"
"        \"unify_kana\", true,\n"
"        \"unify_to_romaji\", true,\n"
"        \"unify_hyphen_and_prolonged_sound_mark\", true\n"
"      )',\n"
"    tokenizer = 'TokenNgram(\"unify_symbol\", false, \"unify_alphabet\", false, \"u"
"nify_digit\", false)'\n"
"  );"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_content_search_index ON memos USING pgroonga (content)\n"
"  WITH (\n"
"    normalizers = 'NormalizerNFKC150\n"
"      (\n"
"        \"unify_kana\", true,\n"
"        \"unify_to_romaji\", true,\n"
"        \"unify_hyphen_and_prolonged_sound_mark\", true\n"
"      )',\n"
"    tokenizer = 'TokenBigramSplitSymbolAlphaDigit'\n"
"  );\n"
"```"
msgstr ""

msgid "## Prepare PostgREST permissions"
msgstr "## PostgREST権限情報を設定"

msgid "To create the necessary permissions for PostgREST, you can follow these steps:"
msgstr "次の手順に従ってPostgRESTへの権限情報を設定します："

msgid ""
"```sql\n"
"CREATE ROLE web_user nologin;\n"
"GRANT USAGE ON SCHEMA public TO web_user;\n"
"GRANT SELECT ON memos TO web_user;"
msgstr ""

msgid ""
"CREATE ROLE authenticator noinherit login password 'mypassword';\n"
"GRANT web_user to authenticator;\n"
"```"
msgstr ""

msgid "## Configure PostgREST"
msgstr "## PostgRESTの設定"

msgid ""
"```sh\n"
"vi memo.conf\n"
"```"
msgstr ""

msgid "Inside of the file:"
msgstr "ファイルの内容:"

msgid ""
"```vim\n"
"db-uri = \"postgres://authenticator:mypassword@localhost:5432/api\"\n"
"db-schemas = \"public\"\n"
"db-anon-role = \"web_user\"\n"
"```"
msgstr ""

msgid "## Start PostgREST"
msgstr "## PostgRESTの起動"

msgid ""
"```sh\n"
"postgrest memo.conf\n"
"```"
msgstr ""

msgid ""
"Oh, for the installation method of PostgREST, please refer to https://postgres"
"t.org/en/stable/explanations/install.html 😉"
msgstr ""
"PostgRESTのインストール方法については https://postgrest.org/en/stable/explanations/install.h"
"tml を参考にしてね😉"

msgid "## Access the URL"
msgstr "## URLにアクセス"

msgid "Open your browser and access the following:"
msgstr "ブラウザを開いて次のURLにアクセスします:"

msgid "http://localhost:3000/memos"
msgstr "http://localhost:3000/memos"

msgid "Result:"
msgstr "結果："

msgid ""
"```json\n"
"[\n"
"  {\"id\":1,\"title\":\"PostgreSQLはリレーショナル・データベース管理システムです。\",\"content\":\"すごいでしょう\"},\n"
"  {\"id\":2,\"title\":\"Groongaは日本語対応の高速な全文検索エンジンです。\",\"content\":\"スワイショウ\"},\n"
"  {\"id\":3,\"title\":\"PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です。\",\"content"
"\":\"ハバナイスデー\"},\n"
"  {\"id\":4,\"title\":\"groongaコマンドがあります。\",\"content\":\"今日はコンバンワこのくにわ\"}\n"
"]\n"
"```"
msgstr ""

msgid ""
"What? Is it really this easy to have a working REST API endpoint? It's too con"
"venient! 🤯"
msgstr "何ということでしょう！？こんなに簡単にREST APIが動いちゃっていいの？！🤯"

msgid ""
"(However, please note that due to the permissions set up in this case, you can"
" only perform `SELECT` operations. So, you can search but not add, modify, or "
"delete data. 😏)"
msgstr "(ただし今回の例では権限的に`SELECT`機能しか使えません。なので検索は出来ますがデータの変更や削除は出来ません😏)"

msgid "## Regular LIKE search"
msgstr "## 通常のLIKE検索"

msgid ""
"This is the method to perform a `LIKE` search using the standard functionality"
" of PostgreSQL."
msgstr "ここでは通常のPostgreSQLの `LIKE` 検索を使う方法を紹介します。"

msgid ""
"(By the way, normally, indexes do not work for PostgreSQL's partial match, but"
" if you create an index with PGroonga, it will work. It's like magic! 👀)"
msgstr ""
"(ところで通常のPostgreSQLでは中間一致検索においてインデックスは使われませんが、PGroongaを使うと中間一致でもインデックスが使えます。まるで"
"魔法ですね！ 👀)"

msgid "### Search by title"
msgstr "### titleを検索"

msgid ""
"[`http://localhost:3000/memos?title=like.*データ*`](http://localhost:3000/memos?t"
"itle=like.*データ*)"
msgstr ""

msgid ""
"```json\n"
"[{\"id\":1,\"title\":\"PostgreSQLはリレーショナル・データベース管理システムです。\",\"content\":\"すごいでしょう\"}]\n"
"```"
msgstr ""

msgid "### Search by content"
msgstr "### contentを検索"

msgid ""
"[`http://localhost:3000/memos?content=like.*ショウ*`](http://localhost:3000/memos"
"?content=like.*ショウ*)"
msgstr ""

msgid ""
"```json\n"
"[{\"id\":2,\"title\":\"Groongaは日本語対応の高速な全文検索エンジンです。\",\"content\":\"スワイショウ\"}]\n"
"```"
msgstr ""

msgid ""
"☝️ With the standard LIKE search functionality, searching for 'ショウ' in katakan"
"a will not match hiragana."
msgstr "☝️ 通常の LIKE 検索ではカタカナの'ショウ'ではひらがなの「しょう」はヒットしません"

msgid "## Searching with PGroonga"
msgstr "## PGroongaを使った検索"

msgid ""
"Now, since the operators `&@~` required for searching with PGroonga are not di"
"rectly available in PostgREST, we will create a stored function to enable thei"
"r usage."
msgstr ""
"さて、PGroongaで使用する `&@~` 演算子はそのままではPostgRESTで使用することができません。それを利用可能にするためのストアドファンクシ"
"ョンを作成します。"

msgid ""
"```sh\n"
"psql api\n"
"```"
msgstr ""

msgid "Execute the following SQL statement:"
msgstr "次のSQL文を実行します:"

msgid ""
"```sql\n"
"CREATE FUNCTION find_title(keywords text) RETURNS SETOF memos AS $$\n"
"BEGIN\n"
"  RETURN QUERY SELECT * FROM memos WHERE title &@~ keywords;\n"
"END;\n"
"$$ LANGUAGE plpgsql;"
msgstr ""

msgid ""
"CREATE FUNCTION find_content(keywords text) RETURNS SETOF memos AS $$\n"
"BEGIN\n"
"  RETURN QUERY SELECT * FROM memos WHERE content &@~ keywords;\n"
"END;\n"
"$$ LANGUAGE plpgsql;\n"
"```"
msgstr ""

msgid "## Searching with PGroonga in PostgREST"
msgstr "## PostgRESTでPGroongaを使用した検索"

msgid ""
"When calling stored functions in PostgREST, the URL format is `/rpc/function_n"
"ame`."
msgstr "PostgRESTでストアドファンクションを使う際には、URLに `/rpc/function_name` を使います。"

msgid ""
"[`http://localhost:3000/rpc/find_title?keywords=コマンド`](http://localhost:3000/r"
"pc/find_title?keywords=コマンド)"
msgstr ""

msgid "The following results will be returned."
msgstr "次のような結果が戻って来ます。"

msgid ""
"```json\n"
"[{\"id\":4,\"title\":\"groongaコマンドがあります。\",\"content\":\"今日はコンバンワこのくにわ\"}]\n"
"```"
msgstr ""

msgid ""
"By the way, using a browser to hit the URL is easier than using curl because d"
"ealing with encoding can be cumbersome."
msgstr "ちなみにブラウザからURLでエンドポイントを叩く方が、文字列のエンコードが不要な分、curlを使うよりも楽です。"

msgid ""
"```console\n"
"$ curl --get --data-urlencode keywords=コマンド http://localhost:3000/rpc/find_tit"
"le\n"
"[{\"id\":4,\"title\":\"groongaコマンドがあります。\",\"content\":\"今日はコンバンワこのくにわ\"}]\n"
"```"
msgstr ""

msgid "### Search in romaji"
msgstr "### ローマ字検索"

msgid ""
"[`http://localhost:3000/rpc/find_title?keywords=desu`](http://localhost:3000/r"
"pc/find_title?keywords=desu)"
msgstr ""

msgid ""
"```json\n"
"[\n"
"  {\"id\":1,\"title\":\"PostgreSQLはリレーショナル・データベース管理システムです。\",\"content\":\"すごいでしょう\"},\n"
"  {\"id\":2,\"title\":\"Groongaは日本語対応の高速な全文検索エンジンです。\",\"content\":\"スワイショウ\"},\n"
"  {\"id\":3,\"title\":\"PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です。\",\"content"
"\":\"ハバナイスデー\"}\n"
"]\n"
"```"
msgstr ""

msgid "### Searching hiragana and katakana in hiragana or katakana"
msgstr "### ひらがな もしくは カタカナ で、ひらがなとカタカナ両方を検索"

msgid ""
"[`http://localhost:3000/rpc/find_content?keywords=ショウ`](http://localhost:3000/"
"rpc/find_content?keywords=ショウ)"
msgstr ""

msgid ""
"```json\n"
"[\n"
"  {\"id\":1,\"title\":\"PostgreSQLはリレーショナル・データベース管理システムです。\",\"content\":\"すごいでしょう\"},\n"
"  {\"id\":2,\"title\":\"Groongaは日本語対応の高速な全文検索エンジンです。\",\"content\":\"スワイショウ\"}\n"
"]\n"
"```"
msgstr ""

msgid "### AND search"
msgstr "### AND検索"

msgid ""
"[`http://localhost:3000/rpc/find_title?keywords=nga です`](http://localhost:3000"
"/rpc/find_title?keywords=nga%20です)"
msgstr ""

msgid ""
"```json\n"
"[\n"
"  {\"id\":2,\"title\":\"Groongaは日本語対応の高速な全文検索エンジンです。\",\"content\":\"スワイショウ\"},\n"
"  {\"id\":3,\"title\":\"PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です。\",\"content"
"\":\"ハバナイスデー\"}\n"
"]\n"
"```"
msgstr ""

msgid "### OR search"
msgstr "### OR検索"

msgid ""
"[`http://localhost:3000/rpc/find_title?keywords=nga OR です`](http://localhost:3"
"000/rpc/find_title?keywords=nga%20OR%20です)"
msgstr ""

msgid ""
"```json\n"
"[\n"
"  {\"id\":2,\"title\":\"Groongaは日本語対応の高速な全文検索エンジンです。\",\"content\":\"スワイショウ\"},\n"
"  {\"id\":3,\"title\":\"PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です。\",\"content"
"\":\"ハバナイスデー\"},\n"
"  {\"id\":4,\"title\":\"groongaコマンドがあります。\",\"content\":\"今日はコンバンワこのくにわ\"},\n"
"  {\"id\":1,\"title\":\"PostgreSQLはリレーショナル・データベース管理システムです。\",\"content\":\"すごいでしょう\"}\n"
"]\n"
"```"
msgstr ""

msgid "## Bonus"
msgstr "## 参考情報"

msgid ""
"When you want to allow various additional searches, you can create multiple st"
"ored functions."
msgstr "追加の検索項目が欲しい場合にはストアドファンクションを追加して行きましょう。"

msgid "### Make target column customizable"
msgstr "### 検索対象を動的にするパターン"

msgid ""
"Here is an example of a stored function that performs a dynamic search by pass"
"ing the column name:"
msgstr "カラム名をパラメータとして渡して検索させる例です："

msgid ""
"```sql\n"
"CREATE OR REPLACE FUNCTION search_col(column_name text, keyword text)\n"
"  RETURNS SETOF memos\n"
"  LANGUAGE plpgsql\n"
"AS $$\n"
"BEGIN\n"
"  IF column_name IN ('title', 'content') THEN -- Check if the column name is v"
"alid\n"
"    RETURN QUERY EXECUTE format('SELECT * FROM memos WHERE %I &@~ ''%s''', col"
"umn_name, keyword);\n"
"  ELSE\n"
"    RAISE EXCEPTION 'Invalid column name'; -- Return an error if the column na"
"me is invalid\n"
"  END IF;\n"
"END;\n"
"$$;\n"
"CREATE FUNCTION\n"
"```"
msgstr ""

msgid "###  Search all columns"
msgstr "### 全てのカラムを検索"

msgid "Stored function to search all columns with a keyword:"
msgstr "全てのカラムに対してキーワード検索します:"

msgid ""
"```sql\n"
"CREATE OR REPLACE FUNCTION memo_search(keyword text)\n"
"  RETURNS SETOF memos\n"
"  LANGUAGE plpgsql\n"
"AS $$\n"
"BEGIN\n"
"  RETURN QUERY EXECUTE format('\n"
"    SELECT *\n"
"    FROM memos\n"
"    WHERE title &@~ $1 OR content &@~ $1\n"
"  ') USING keyword;\n"
"END;\n"
"$$;\n"
"```"
msgstr ""
