msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"PO-Revision-Date: 2023-08-13 09:53+0900\n"

msgid ""
"---\n"
"title: How to use PGroonga with PostgREST\n"
"---"
msgstr ""
"---\n"
"title: PostgRESTでPGroongaを使う方法\n"
"---"

msgid "# How to use PGroonga with PostgREST"
msgstr "# PostgRESTでPGroongaを使う方法"

msgid ""
"Create data in PostgreSQL, provide it as an API using PostgREST, and then "
"easily create an **\"API for convenient data search\"**. This is a "
"beginner's guide to PostgREST with PGroonga."
msgstr ""
"PostgRESTを使うことによってPostgreSQLで作ったデータの**\"検索APIを簡単に公開"
"\"**できます。これはそのためのPostgRESTでPGroongaを使うための初心者向けガイド"
"です。"

msgid "## Prepare data on the PostgreSQL side"
msgstr "## PostgreSQL側でのデータの準備"

msgid ""
"Here, we will use PostgreSQL, which is usually available on most computers😏"
msgstr ""
"ここでは大抵どのご家庭のコンピュータにも入っているPostgreSQLを使います😏"

msgid ""
"```sh\n"
"createdb api\n"
"psql api\n"
"```"
msgstr ""
"```sh\n"
"createdb api\n"
"psql api\n"
"```"

msgid "## Create a table and create suitable indexes"
msgstr "## テーブル作成と適切なインデックス作成"

msgid ""
"To make use of the convenient features of PGroonga, creating indexes that "
"match the features is crucial."
msgstr ""
"PGroongaの便利な機能を使うには、それらの機能に応じた最適なインデックスを作る"
"ことが大変重要となります。"

msgid ""
"In this example, we will create a memo table and create indexes that enable "
"the following search functionalities for each column:"
msgstr ""
"この例では、memoテーブルを作成し、後に続く検索機能に必要なインデックスをそれ"
"ぞれのカラムに対して作成します。"

msgid ""
"- Treating hiragana and katakana as equivalent (searching for \"あっぷる\" "
"will match both \"あっぷる\" and \"アップル\")."
msgstr ""
"- ひらがなとカタカナを同一視させます (\"あっぷる\"でも\"あっぷる\"と\"アップ"
"ル\"がヒット)。"

msgid ""
"- Treating hiragana, katakana, and romaji as equivalent (searching for \"de-"
"tabe-su\" will match \"de-tabe-su,\" \"でーたべーす,\" and \"データベース\")."
msgstr ""
"- ひらがなとカタカナとローマ字を同一視させます (\"de-tabe-su\"で検索しても"
"\"de-tabe-su\",\"でーたべーす\",そして \"データベース\"がヒットします)。"

msgid ""
"- Treating various long vowel marks as equivalent (treating similar long "
"vowel marks, such as \"-˗֊‐‑‒–⁃⁻₋− ﹣－ ー—―─━ｰ,\" as the same for easier "
"searching)."
msgstr ""
"- 様々な長音記号を同一視させます (\"-˗֊‐‑‒–⁃⁻₋− ﹣－ ー—―─━ｰ,\"を同じ文字とし"
"て扱います)。"

msgid "Now, let's try it out!"
msgstr "早速やってみましょう！"

msgid ""
"```sql\n"
"CREATE EXTENSION IF NOT EXISTS pgroonga;"
msgstr ""

msgid ""
"CREATE TABLE memos (\n"
"  id integer,\n"
"  title text,\n"
"  content text\n"
");"
msgstr ""

msgid ""
"-- Please don't mind the randomness of the sample text 😗\n"
"INSERT INTO memos VALUES (1, 'PostgreSQLはリレーショナル・データベース管理システムです。','すごいでしょう');\n"
"INSERT INTO memos VALUES (2, 'Groongaは日本語対応の高速な全文検索エンジンです。','スゴイデショウ');\n"
"INSERT INTO memos VALUES (3, 'PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です。','ハバナイスデー');\n"
"INSERT INTO memos VALUES (4, 'groongaコマンドがあります。','今日はコンバンワこんにちわ');"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_title_search_index ON memos USING pgroonga (title)\n"
"  WITH (\n"
"    normalizers = 'NormalizerNFKC150(\n"
"							\"unify_to_romaji\", true,\n"
"							\"unify_hyphen_and_prolonged_sound_mark\", true\n"
"						)',\n"
"    tokenizer='TokenNgram(\n"
"                          \"unify_alphabet\", false,\n"
"                          \"unify_symbol\", false,\n"
"                          \"unify_digit\", false,\n"
"                          \"report_source_location\", true\n"
"                      )'\n"
"  );\n"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_content_search_index ON memos USING pgroonga "
"(content)\n"
"  WITH (\n"
"    normalizers = 'NormalizerNFKC150(\n"
"							\"unify_to_romaji\", true,\n"
"							\"unify_hyphen_and_prolonged_sound_mark\", true\n"
"						)',\n"
"    tokenizer='TokenNgram(\n"
"                          \"unify_alphabet\", false,\n"
"                          \"unify_symbol\", false,\n"
"                          \"unify_digit\", false,\n"
"                          \"report_source_location\", true\n"
"						)'\n"
"  );
"```"
msgstr ""

msgid "## Prepare PostgREST permissions"
msgstr "## PostgREST権限情報を設定"

msgid ""
"To create the necessary permissions for PostgREST, you can follow these "
"steps:"
msgstr "次の手順に従ってPostgRESTへの権限情報を設定します："

msgid ""
"```sql\n"
"CREATE ROLE web_user nologin;\n"
"GRANT USAGE ON SCHEMA public TO web_user;\n"
"GRANT SELECT ON memos TO web_user;"
msgstr ""

msgid ""
"CREATE ROLE authenticator noinherit login password 'mypassword';\n"
"GRANT web_user to authenticator;\n"
"```"
msgstr ""

msgid "## Configure PostgREST"
msgstr "## PostgRESTの設定"

msgid ""
"```sh\n"
"vi memo.conf\n"
"```"
msgstr ""

msgid "Inside of the file:"
msgstr "ファイルの内容:"

msgid ""
"```vim\n"
"db-uri = \"postgres://authenticator:mypassword@localhost:5432/api\"\n"
"db-schemas = \"public\"\n"
"db-anon-role = \"web_user\"\n"
"```"
msgstr ""

msgid "## Start PostgREST"
msgstr "## PostgRESTの起動"

msgid ""
"```sh\n"
"postgrest memo.conf\n"
"```"
msgstr ""

msgid ""
"Oh, for the installation method of PostgREST, please refer to https://"
"postgrest.org/en/stable/explanations/install.html 😉"
msgstr ""
"PostgRESTのインストール方法については https://postgrest.org/en/stable/"
"explanations/install.html を参考にしてね😉"

msgid "## Access the URL"
msgstr "## URLにアクセス"

msgid "Open your browser and access the following:"
msgstr "ブラウザを開いて次のURLにアクセスします:"

msgid "http://localhost:3000/memos"
msgstr "http://localhost:3000/memos"

msgid "Result:"
msgstr "結果："

msgid ""
"```json\n"
"[\n"
"  {\"id\":1,\"title\":\"PostgreSQLはリレーショナル・データベース管理システムです。\",\"content\":\"すごいでしょう\"}, \n"
"  {\"id\":2,\"title\":\"Groongaは日本語対応の高速な全文検索エンジンです。\",\"content\":\"スゴイデショウ\"}, \n"
"  {\"id\":3,\"title\":\"PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です。\",\"content\":\"ハバナイスデー\"}, \n" 
"  {\"id\":2,\"title\":\"groongaコマンドがあります。\",\"content\":\"今日はコンバンワこんにちわ\"} \n"
"]\n"
"```"
msgstr ""

msgid ""
"What? Is it really this easy to have a working REST API endpoint? It's too "
"convenient! 🤯"
msgstr ""
"何ということでしょう！？こんなに簡単にREST APIが動いちゃっていいの？！🤯"

msgid ""
"(However, please note that due to the permissions set up in this case, you "
"can only perform `SELECT` operations. So, you can search but not add, "
"modify, or delete data. 😏)"
msgstr ""
"(ただし今回の例では権限的に`SELECT`機能しか使えません。なので検索は出来ますが"
"データの変更や削除は出来ません😏)"

msgid "## Regular LIKE search"
msgstr "## 通常のLIKE検索"

msgid ""
"This is the method to perform a `LIKE` search using the standard "
"functionality of PostgreSQL."
msgstr "ここでは通常のPostgreSQLの `LIKE` 検索を使う方法を紹介します。"

msgid ""
"(By the way, normally, indexes do not work for PostgreSQL's partial match, "
"but if you create an index with PGroonga, it will work. It's like magic! 👀)"
msgstr ""
"(ところで通常のPostgreSQLでは中間一致検索においてインデックスは使われません"
"が、PGroongaを使うと中間一致でもインデックスが使えます。まるで魔法ですね！ "
"👀)"

msgid "### Search by title"
msgstr "### titleを検索"

msgid ""
"```json\n"
"[{\"id\":1,\"title\":\"PostgreSQLはリレーショナル・データベース管理システムです。\",\"content\":\"すごいでしょう\"}]\n"
"```"
msgstr ""

msgid "### Search by content"
msgstr "### contentを検索"

msgsid "[`http://localhost:3000/memos?content=like.*tastic*`](http://localhost:3000/memos?content=like.*tastic*)"
msgstr "[`http://localhost:3000/memos?content=like.*ショウ*`](http://localhost:3000/memos?content=like.*ショウ*)"

msgid ""
"```json\n"
"[{\"id\":2,\"title\":\"Groongaは日本語対応の高速な全文検索エンジンです。"
"\",\"content\":\"スゴイデショウ\"}]\n"
"```"
msgstr ""

msgid ""
"☝️ With the standard LIKE search functionality, searching for 'ショウ' in "
"katakana will not match hiragana."
msgstr ""
"☝️ 通常の LIKE 検索ではカタカナの'ショウ'ではひらがなの「しょう」はヒットしま"
"せん"

msgid "## Searching with PGroonga"
msgstr "## PGroongaを使った検索"

msgid ""
"Now, since the operators `&@~` required for searching with PGroonga are not "
"directly available in PostgREST, we will create a stored function to enable "
"their usage."
msgstr ""
"さて、PGroongaで使用する `&@~` 演算子はそのままではPostgRESTで使用することが"
"できません。それを利用可能にするためのストアドファンクションを作成します。"

msgid ""
"```sh\n"
"psql api\n"
"```"
msgstr ""

msgid "Execute the following SQL statement:"
msgstr "次のSQL文を実行します:"

msgid ""
"```sql\n"
"CREATE FUNCTION find_title(keywords text) RETURNS SETOF memos AS $$\n"
"BEGIN\n"
"  RETURN QUERY SELECT * FROM memos WHERE title &@~ keywords;\n"
"END;\n"
"$$ LANGUAGE plpgsql;"
msgstr ""

msgid ""
"CREATE FUNCTION find_content(keywords text) RETURNS SETOF memos AS $$\n"
"BEGIN\n"
"  RETURN QUERY SELECT * FROM memos WHERE content &@~ keywords;\n"
"END;\n"
"$$ LANGUAGE plpgsql;\n"
"```"
msgstr ""

msgid "**NOTE: You need to restart `PostgREST`` when create a new functions**"
msgstr ""

msgid ""
"Before proceeding to the next section, please restart your PostgREST by "
"pressing `Ctrl + C` to stop the currently running PostgREST instance, and "
"then run it again using the following command:"
msgstr ""

msgid "## Searching with PGroonga in PostgREST"
msgstr "## PostgRESTでPGroongaを使用した検索"

msgid ""
"When calling stored functions in PostgREST, the URL format is `/rpc/"
"function_name`."
msgstr ""
"PostgRESTでストアドファンクションを使う際には、URLに `/rpc/function_name` を"
"使います。"

msgid ""
"[`http://localhost:3000/rpc/find_title?keywords=command`](http://"
"localhost:3000/rpc/find_title?keywords=command)"
msgstr ""
"[`http://localhost:3000/rpc/find_title?keywords=こまんど`](http://"
"localhost:3000/rpc/find_title?keywords=こまんど)"

msgid "The following results will be returned."
msgstr "次のような結果が戻って来ます。"

msgid ""
"```json\n"
"[{\"id\":4,\"title\":\"groongaコマンドがあります。\",\"content\":\"今日はコンバンワこんにちわ"
"\"}]\n"
"```"
msgstr ""

msgid ""
"By the way, using a browser to hit the URL is easier than using curl because "
"dealing with encoding can be cumbersome."
msgstr ""
"ちなみにブラウザからURLでエンドポイントを叩く方が、文字列のエンコードが不要な"
"分、curlを使うよりも楽です。"

msgid ""
"```console\n"
"$ curl --get --data-urlencode keywords=コマンド http://localhost:3000/rpc/"
"find_title\n"
"[{\"id\":4,\"title\":\"groongaコマンドがあります。\",\"content\":\"今日はコンバンワこんにちわ"
"\"}]\n"
"```"
msgstr ""

msgid "### Searching is case-insensitive by default"
msgstr ""

msgid ""
"Unlike `LIKE` search, PGroonga offers case-insensitive searching by default."
msgstr ""

msgid ""
"[`http://localhost:3000/rpc/find_title?keywords=Groonga`](http://"
"localhost:3000/rpc/find_title?keywords=Groonga)"
msgstr ""

msgid ""
"```json\n"
"[\n"
"  {\"id\":2,\"title\":\"Groongaは日本語対応の高速な全文検索エンジンです。"
"\",\"content\":\"スゴイデショウ\"}, \n"
"  {\"id\":3,\"title\":\"PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です。"
"\",\"content\":\"ハバナイスデー\"}, \n"
"  {\"id\":4,\"title\":\"groongaコマンドがあります。\",\"content\":\"今日はコンバンワこんにちわ"
"\"}\n"
"]\n"
"```"
msgstr ""

msgid "### AND search"
msgstr "### AND検索"

msgid ""
"[`http://localhost:3000/rpc/find_title?keywords=Groonga command`](http://"
"localhost:3000/rpc/find_title?keywords=Groonga%20command)"
msgstr ""

msgid "### OR search"
msgstr "### OR検索"

msgid ""
"[`http://localhost:3000/rpc/find_title?keywords=nga OR search`](http://"
"localhost:3000/rpc/find_title?keywords=nga%20OR%20search)"
msgstr ""

msgid ""
"[`http://localhost:3000/rpc/find_title?keywords=nga -pg`](http://"
"localhost:3000/rpc/find_title?keywords=nga%20-pg)"
msgstr ""

msgid ""
"```json\n"
"[\n"
"  {\"id\":2,\"title\":\""Groongaは日本語対応の高速な全文検索エンジンです。"
"\",\"content\":\"スゴイデショウ\"}, \n"
"  {\"id\":4,\"title\":\"groongaコマンドがあります。\",\"content\":\"今日はコンバンワこんにちわ"
"\"}\n"
"]\n"
"```"
msgstr ""

msgid "## Bonus"
msgstr "## 参考情報"

msgid ""
"When you want to allow various additional searches, you can create multiple "
"stored functions."
msgstr ""
"追加の検索項目が欲しい場合にはストアドファンクションを追加して行きましょう。"

msgid "### Make target column customizable"
msgstr "### 検索対象を動的にするパターン"

msgid ""
"Here is an example of a stored function that performs a dynamic search by "
"passing the column name:"
msgstr "カラム名をパラメータとして渡して検索させる例です："

msgid ""
"```sql\n"
"CREATE OR REPLACE FUNCTION search_col(column_name text, keyword text)\n"
"  RETURNS SETOF memos\n"
"  LANGUAGE plpgsql\n"
"AS $$\n"
"BEGIN\n"
"  IF column_name IN ('title', 'content') THEN -- Check if the column name is "
"valid\n"
"    RETURN QUERY EXECUTE format('SELECT * FROM memos WHERE %I &@~ ''%s''', "
"column_name, keyword);\n"
"  ELSE\n"
"    RAISE EXCEPTION 'Invalid column name'; -- Return an error if the column "
"name is invalid\n"
"  END IF;\n"
"END;\n"
"$$;\n"
"CREATE FUNCTION\n"
"```"
msgstr ""

msgid "###  Search all columns"
msgstr "### 全てのカラムを検索"

msgid "Stored function to search all columns with a keyword:"
msgstr "全てのカラムに対してキーワード検索します:"

msgid ""
"```sql\n"
"CREATE OR REPLACE FUNCTION memo_search(keyword text)\n"
"  RETURNS SETOF memos\n"
"  LANGUAGE plpgsql\n"
"AS $$\n"
"BEGIN\n"
"  RETURN QUERY EXECUTE format('\n"
"    SELECT *\n"
"    FROM memos\n"
"    WHERE title &@~ $1 OR content &@~ $1\n"
"  ') USING keyword;\n"
"END;\n"
"$$;\n"
"```"
msgstr ""

msgid "## Keyword-Based Content Search"
msgstr "## キーワードだけのコンテンツ検索"

msgid ""
"At times, you may want to conduct a search solely using keywords, rather "
"than specifying particular fields. Let's explore how you can accomplish this."
msgstr ""
"検索対象のフィールド指定をせずにキーワードだけで全体を検索したいことがあります。ここではそのやり方を"
"見ていきましょう。"

msgid "Consider a personal library stored in a database table `books`:"
msgstr "個人蔵書のデータベースで`books`テーブルを持つ例で考えていきます:"

msgid ""
"```sql\n"
"CREATE TABLE books (\n"
"  id INTEGER,\n"
"  title TEXT,\n"
"  author TEXT\n"
");"
msgstr ""

msgid ""
"INSERT INTO books VALUES (1, 'Adventures of Sherlock Holmes', 'Arthur Conan "
"Doyle');\n"
"INSERT INTO books VALUES (2, 'The Hound of the Baskervilles', 'Arthur Conan "
"Doyle');\n"
"INSERT INTO books VALUES (3, 'The Memoirs of Sherlock Holmes', 'Arthur Conan "
"Doyle');\n"
"INSERT INTO books VALUES (4, 'The Lion, the Witch, and the Wardrobe', 'C. S. "
"Lewis');\n"
"```"
msgstr ""

msgid ""
"Suppose you want to find books with the author name containing 'Conan Doyle' "
"and titles that include 'Sherlock'. Normally, you would execute the "
"following SQL query:"
msgstr ""
"仮に作者名が'Conan Doyle'で作品名に'Sherlock'が含まれている本を探したいとします。通常"
"次のようなSQLクエリを使います:"

msgid ""
"```sql\n"
"SELECT * FROM books WHERE author LIKE '%Conan Doyle%' and title LIKE "
"'%Sherlock%';\n"
"-- id |             title              |       author       \n"
"-- ----+--------------------------------+--------------------\n"
"--   1 | Adventures of Sherlock Holmes  | Arthur Conan Doyle\n"
"--   3 | The Memoirs of Sherlock Holmes | Arthur Conan Doyle\n"
"-- (2 rows)\n"
"```"
msgstr ""

msgid ""
"However, if you're aiming for a Google-like keyword search experience, you "
"would want to achieve the same results with a keyword string such as 'conan "
"doyle sherlock'."
msgstr ""
"ただ、Googleのようにキーワード検索のみで同じ検索を実現する場合は'conan doyle sherlock'"
"のような検索キーワードで同じ結果が出て来て欲しいところです。"

msgid "### Creating an Special Index for Keyword-based Search"
msgstr "### キーワード検索用の特別なインデックス作成"

msgid ""
"To create this functionality, you will need to design multiple array "
"indexes. Here's how you can proceed:"
msgstr ""
"このような機能を実現するためには複数配列なインデックスを作成する必要があります。ここに"
"その作成方法を記載します:"

msgid ""
"```sql\n"
"CREATE INDEX pg_multi_book_index on books USING pgroonga\n"
"\t((ARRAY[title, author]) pgroonga_text_array_full_text_search_ops_v2)\n"
"\tWITH (\n"
"    normalizers = 'NormalizerNFKC150\n"
"      (\n"
"        \"unify_kana\", true,\n"
"        \"unify_to_romaji\", true,\n"
"        \"unify_hyphen_and_prolonged_sound_mark\", true\n"
"      )',\n"
"    tokenizer = 'TokenNgram(\"unify_symbol\", false, \"unify_alphabet\", "
"false, \"unify_digit\", false)'\n"
"  );\n"
"```"
msgstr ""

msgid "### Creating a Stored Function for Keyword-Based Search"
msgstr "### キーワード検索用のストアドファンクションの作成"

msgid ""
"To emulate a Google-like search experience within your database, you can "
"create a stored function that accepts a keyword and returns the relevant "
"records from the `books` table:"
msgstr ""
"Googleのような検索の動きをデータベースで実現させるには`books`テーブルからキーワードで"
"内容を検索するためのストアドファンクションを次のように作ります:"

msgid ""
"```sql\n"
"CREATE OR REPLACE FUNCTION gsearch(keyword text)\n"
"  RETURNS SETOF books\n"
"  LANGUAGE plpgsql\n"
"AS $$\n"
"BEGIN\n"
"  RETURN QUERY EXECUTE format('\n"
"    SELECT *\n"
"    FROM books\n"
"    WHERE ARRAY[title, author] &@~ $1\n"
"  ') USING keyword;\n"
"END;\n"
"$$;\n"
"```"
msgstr ""

msgid "### Adding New Permission to the books Table"
msgstr "### booksテーブルに権限を付与"

msgid ""
"You'll also need to grant the appropriate permissions to allow users to "
"access the books table. Use the following SQL command:"
msgstr ""
"booksテーブルにアクセス可能なように必要な権限を付与します。次のSQLコマンドを実施してください:"

msgid ""
"```sql\n"
"GRANT SELECT ON books TO web_user;\n"
"```"
msgstr ""

msgid "### Search Example Using a Browser"
msgstr "### ブラウザを使った検索例"

msgid ""
"Now, you can perform a keyword-based search directly from your web browser. "
"Simply navigate to the following URL:"
msgstr ""
"キーワード検索機能をテストする準備が整いました。ブラウザを開いて次のURLにアクセスしてください:"

msgid ""
"[`http://localhost:3000/rpc/gsearch?keyword=conan doyle sherlock`](http://"
"localhost:3000/rpc/gsearch?keyword=conan%20doyle%20sherlock)"
msgstr ""

msgid ""
"```json\n"
"[\n"
"  {\"id\":1,\"title\":\"Adventures of Sherlock Holmes\",\"author\":\"Arthur "
"Conan Doyle\"}, \n"
"  {\"id\":3,\"title\":\"The Memoirs of Sherlock Holmes\",\"author\":\"Arthur "
"Conan Doyle\"}\n"
"]\n"
"```"
msgstr ""

msgid ""
"This seamless and user-friendly approach to searching through your data with "
"keywords is both practical and exciting. It's a fantastic way to enhance "
"your search capabilities, don't you think?"
msgstr ""
"キーワード検索を使うことで馴染みある方法で検索機能を利用することが出来ます。検索機能を"
"充実させる上で便利な方法ではないでしょうか？"

msgid "## Using Keyword Auto Complete"
msgstr "## 検索キーワードのオートコンプリート"

msgid ""
"PGroonga has features to implement auto complete which is explained in [the "
"auto complete how to section][auto-complete]."
msgstr ""
"PGroongaにはオートコンプリート機能が実装されており、ハウツーの[オートコンプリートの実装方法][auto-complete]に記載があります。"

msgid ""
"Here we will explore how to implement this using PostgREST and just a simple "
"HTML with JavaScript."
msgstr ""
"ここではPostgRESTとシンプルなHTMLファイル（とJavaScript）でこの機能を利用する方法を紹介します。"

msgid "### Create Table for Auto Complete Feature"
msgstr "### オートコンプリート機能用のテーブルの作成"

msgid ""
"```sql\n"
"CREATE TABLE terms (\n"
"  term text,\n"
"  readings text[]\n"
");"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_terms_prefix_search ON terms USING pgroonga\n"
"  (readings pgroonga_text_array_term_search_ops_v2);"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_terms_full_text_search ON terms USING pgroonga\n"
"  (term)\n"
"  WITH (tokenizer = 'TokenBigramSplitSymbolAlphaDigit');"
msgstr ""

msgid ""
"INSERT INTO terms (term, readings) VALUES ('PostgreSQL', ARRAY['sql', "
"'postgres']);\n"
"INSERT INTO terms (term, readings) VALUES ('Groonga', "
"ARRAY['elasticsearch','meilisearch']);\n"
"INSERT INTO terms (term, readings) VALUES ('PGroonga', "
"ARRAY['postgresql','extension']);\n"
"```"
msgstr ""

msgid ""
"```sql\n"
"GRANT SELECT ON terms TO web_user;\n"
"```"
msgstr ""

msgid "### Create Auto Complete End Point"
msgstr "### オートコンプリート機能用のエンドポイント作成"

msgid ""
"```sql\n"
"CREATE OR REPLACE FUNCTION autocomplete(keyword text) RETURNS SETOF text AS $"
"$\n"
"DECLARE\n"
"  result text[];\n"
"BEGIN\n"
"  IF keyword = '' THEN\n"
"    RETURN QUERY SELECT unnest(result);\n"
"  ELSE\n"
"    RETURN QUERY SELECT term FROM terms WHERE readings &@ keyword;\n"
"  END IF;\n"
"END;\n"
"$$ LANGUAGE plpgsql;\n"
"```"
msgstr ""

msgid "### Create a HTML with JavaScript"
msgstr "### HTMLとJavaScriptの作成"

msgid "Create following HTML file:"
msgstr ""

msgid ""
"```sh\n"
"vi index.html\n"
"```"
msgstr ""

msgid ""
"```html\n"
"<!DOCTYPE html>\n"
"<html>\n"
"  <head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <meta name=\"viewport\" content=\"width=device-width, initial-"
"scale=1.0\">\n"
"    <title>PGroonga Auto Complete Search</title>\n"
"    <link rel=\"stylesheet\"\n"
"          href=\"https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete."
"js@10.2.7/dist/css/autoComplete.min.css\">\n"
"    <style>\n"
"        .center-container {\n"
"            display: flex;\n"
"            justify-content: center;\n"
"            align-items: center;\n"
"            min-height: 100vh;\n"
"        }\n"
"    </style>\n"
"  </head>\n"
"  <body>\n"
"    <div class=\"center-container\">\n"
"        <form name=\"search\" id=\"searchForm\">\n"
"            <input type=\"search\" size=\"60\" maxlength=\"60\" name=\"key\" "
"id=\"autoComplete\">\n"
"        </form>"
msgstr ""

msgid ""
"        <script src=\"https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete."
"js@10.2.7/dist/autoComplete.min.js\">\n"
"        </script>\n"
"        <script type=\"text/javascript\">\n"
"            const searchForm = document.getElementById('searchForm');"
msgstr ""

msgid ""
"            searchForm.addEventListener('submit', async (event) => {\n"
"                event.preventDefault();\n"
"                const query = document.getElementById('autoComplete').value;"
msgstr ""

msgid ""
"                if (query.length === 0) {\n"
"                    return;\n"
"                }"
msgstr ""

msgid ""
"                const params = new URLSearchParams({keywords: query});\n"
"                const response = await fetch(`http://localhost:3000/rpc/"
"find_title?${params.toString()}`);\n"
"                const result = await response.json();"
msgstr ""

msgid ""
"                const preElement = document.getElementById('output');\n"
"                if (result.length > 0) {\n"
"                    const formattedValue = JSON.stringify(result, null, 2);\n"
"                    preElement.textContent = formattedValue;\n"
"                } else {\n"
"                    preElement.textContent = 'No results found';\n"
"                }\n"
"            });"
msgstr ""

msgid ""
"            const dataSource = async (query) => {\n"
"                const params = new URLSearchParams({keyword: query});\n"
"                const source = await fetch(`http://localhost:3000/rpc/"
"autocomplete?${params.toString()}`);\n"
"                return await source.json();\n"
"            };"
msgstr ""

msgid ""
"            const autoCompleteJS = new autoComplete({\n"
"                placeHolder: \"Enter a keyword\",\n"
"                data: {\n"
"                    src: dataSource\n"
"                },\n"
"                searchEngine: (query, record) => record,\n"
"                events: {\n"
"                    input: {\n"
"                        selection: (event) => {\n"
"                            const selection = event.detail.selection.value;\n"
"                            autoCompleteJS.input.value = selection;\n"
"                        }\n"
"                    }\n"
"                },\n"
"                submit: true\n"
"            });\n"
"        </script>\n"
"        <pre id=\"output\"></pre>\n"
"    </div>\n"
"  </body>\n"
"</html>\n"
"```"
msgstr ""

msgid "### Run PostgREST as API backend"
msgstr "### PostgRESTをAPIバックエンドとして起動"

msgid "Run your PostgREST service using following command:"
msgstr "次のコマンドを使用してPostgRESTを実行します"

msgid "### Open html and Try Out"
msgstr "### htmlファイルを開いてテストします"

msgid "Open `index.html` with your browser."
msgstr "ブラウザで`index.html`を開きます。"

msgid "![PGroonga Auto Complete1](../images/postgrest/auto-complete1.png)"
msgstr "![PGroonga Auto Complete1](../../images/postgrest/auto-complete1.png)"

msgid "Type something and it will show the suggestions."
msgstr "何か入力するとキーワード候補が現れます。"

msgid "![PGroonga Auto Complete2](../images/postgrest/auto-complete2-en.png)"
msgstr "![PGroonga Auto Complete2](../../images/postgrest/auto-complete2-en.png)"

msgid ""
"When you press `Search` button, it will performe keyword search on memos "
"table title data."
msgstr ""
"`Search`ボタンをクリックするとmemosテーブルのtitleデータを検索します。"

msgid "![PGroonga Auto Complete3](../images/postgrest/auto-complete3-en.png)"
msgstr "![PGroonga Auto Complete3](../../images/postgrest/auto-complete3-en.png)"

msgid "[auto-complete]: auto-complete.html"
msgstr ""
