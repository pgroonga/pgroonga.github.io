# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Kouhei Sutou <kou@cozmixng.org>, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-24 12:18+0900\n"
"PO-Revision-Date: 2023-08-13 00:16+0000\n"
"Last-Translator: Kouhei Sutou <kou@cozmixng.org>, 2023\n"
"Language-Team: Japanese (https://app.transifex.com/groonga/teams/174082/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../../../reference/functions/pgroonga-query-expand.md:1
msgid ""
"---\n"
"title: pgroonga_query_expand function\n"
"upper_level: ../\n"
"---"
msgstr ""
"---\n"
"title: pgroonga_query_expand関数\n"
"upper_level: ../\n"
"---"

#: ../../../../reference/functions/pgroonga-query-expand.md:6
msgid "# `pgroonga_query_expand` function"
msgstr "# `pgroonga_query_expand`関数"

#: ../../../../reference/functions/pgroonga-query-expand.md:8
msgid "Since 1.2.2."
msgstr "1.2.2で追加。"

#: ../../../../reference/functions/pgroonga-query-expand.md:10
msgid "## Summary"
msgstr "## 概要"

#: ../../../../reference/functions/pgroonga-query-expand.md:12
msgid ""
"`pgroonga_query_expand` function expands registered synonyms in query in "
"[query syntax][groonga-query-syntax]. Query syntax is used by [`&@~` "
"operator][query-v2], [`&@~|` operator][query-in-v2] and so on."
msgstr ""
"`pgroonga_query_expand`関数は[クエリー構文][groonga-query-"
"syntax]を使ったクエリー内にある登録済みの同義語を展開します。クエリー構文は[`&@~`演算子][query-v2]や[`&@~|`演算子][query-"
"in-v2]で使われています。"

#: ../../../../reference/functions/pgroonga-query-expand.md:14
msgid ""
"`pgroonga_query_expand` function is useful to implement [query "
"expansion][wikipedia-query-expansion]. See also [document for Groonga's "
"query expansion feature][groonga-query-expander]."
msgstr ""
"`pgroonga_query_expand`関数は[クエリー展開][wikipedia-query-"
"expansion]機能を実現するときに便利です。[Groongaのクエリー展開機能のドキュメント][groonga-query-"
"expander]も参照してください。"

#: ../../../../reference/functions/pgroonga-query-expand.md:16
msgid "## Syntax"
msgstr "## 構文"

#: ../../../../reference/functions/pgroonga-query-expand.md:18
msgid "Here is the syntax of this function:"
msgstr "この関数の構文は次の通りです。"

#: ../../../../reference/functions/pgroonga-query-expand.md:20
msgid ""
"```text\n"
"text pgroonga_query_expand(table_name,\n"
"                           term_column_name,\n"
"                           synonyms_column_name,\n"
"                           query)\n"
"```"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:27
msgid ""
"`table_name` is a `text` type value. It's an existing table name that stores"
" synonyms."
msgstr "`table_name`は`text`型の値です。同義語を格納している既存のテーブルの名前を指定します。"

#: ../../../../reference/functions/pgroonga-query-expand.md:29
msgid ""
"`term_column_name` is a `text` type value. It's an column name that stores "
"term to be expanded in the `table_name` table. The column is `text` type or "
"`text[]` type value."
msgstr ""
"`term_column_name`は`text`型の値です。`table_name`テーブル内の展開対象の単語を格納しているカラムの名前を指定します。このカラムは`text`型か`text[]`型のカラムです。"

#: ../../../../reference/functions/pgroonga-query-expand.md:31
msgid ""
"`synonyms_column_name` is a `text` type value. It's an column name that "
"stores synonyms of the `term` column. The column is `text[]` type value."
msgstr ""
"`synonyms_column_name`は`text`型の値です。`term`カラムの同義語を格納しているカラム名を指定します。このカラムは`text[]`型のカラムです。"

#: ../../../../reference/functions/pgroonga-query-expand.md:33
msgid ""
"`query` is a `text` type value. It's a query that uses [query "
"syntax][groonga-query-syntax]."
msgstr "`query`は`text`型の値です。[クエリー構文][groonga-query-syntax]を使っているクエリーです。"

#: ../../../../reference/functions/pgroonga-query-expand.md:35
msgid ""
"`pgroonga_query_expand` returns a `text` type value. All registered synonyms"
" are expanded in the `query`."
msgstr ""
"`pgroonga_query_expand`は`text`型の値を返します。`query`中にある登録済みの同義語がすべて展開されています。"

#: ../../../../reference/functions/pgroonga-query-expand.md:37
msgid ""
"It's recommended that `${table_name}.${term_column_name}` is indexed by "
"PGroonga with `pgroonga_text_term_search_ops_v2` operator class for fast "
"query expansion like the following:"
msgstr ""
"次のように`pgroonga_text_term_search_ops_v2`演算子クラス指定のPGroongaで`${table_name}.${term_column_name}`のインデックスを作成することをオススメします。これは高速にクエリー展開できるようにするためです。"

#: ../../../../reference/functions/pgroonga-query-expand.md:39
#: ../../../../reference/functions/pgroonga-query-expand.md:66
msgid ""
"```sql\n"
"CREATE TABLE synonyms (\n"
"  term text,\n"
"  synonyms text[]\n"
");"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:45
msgid ""
"CREATE INDEX synonyms_term\n"
"          ON synonyms\n"
"       USING pgroonga (term pgroonga_text_term_search_ops_v2);\n"
"```"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:50
msgid ""
"`pgroonga_query_escape` function can work without index but can work faster "
"with index."
msgstr "`pgroonga_query_escape`関数はインデックスなしでも動きますが、インデックスがあるとより高速に動きます。"

#: ../../../../reference/functions/pgroonga-query-expand.md:52
msgid ""
"You can use all index access methods that support `=` for `text` type such "
"as `btree`. But it's recommended that you use PGroonga. Because PGroonga "
"supports value normalized `=` (including case insensitive comparison) for "
"`text`. Value normalized `=` is useful for query expansion."
msgstr ""
"`btree`のように`text`型の`=`に対応しているインデックスアクセスメソッドであればどのインデックスアクセスメソッドでも使えます。しかし、PGroongaを使うことをオススメします。なぜなら、PGroongaは`text`の値を正規化した`=`（大文字小文字を無視した比較を含む）に対応しているからです。クエリー展開時は値を正規化した`=`が便利です。"

#: ../../../../reference/functions/pgroonga-query-expand.md:54
msgid "## Usage"
msgstr "## 使い方"

#: ../../../../reference/functions/pgroonga-query-expand.md:56
msgid "You can use the following styles:"
msgstr "次のスタイルを使えます。"

#: ../../../../reference/functions/pgroonga-query-expand.md:58
msgid "  * A term to multiple synonyms mapping"
msgstr "  * 1単語を複数の同義語にマッピング"

#: ../../../../reference/functions/pgroonga-query-expand.md:60
msgid "  * Synonym groups"
msgstr "  * 同義語グループ"

#: ../../../../reference/functions/pgroonga-query-expand.md:62
msgid "### A term to multiple synonyms mapping {#usage-term-to-synonyms}"
msgstr "### 1単語を複数の同義語にマッピング {#usage-term-to-synonyms}"

#: ../../../../reference/functions/pgroonga-query-expand.md:64
#: ../../../../reference/functions/pgroonga-query-expand.md:100
msgid "Here are sample schema and data:"
msgstr "サンプルスキーマとデータは次の通りです。"

#: ../../../../reference/functions/pgroonga-query-expand.md:72
msgid ""
"CREATE INDEX synonyms_term\n"
"          ON synonyms\n"
"       USING pgroonga (term pgroonga_text_term_search_ops_v2);"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:76
msgid ""
"INSERT INTO synonyms VALUES ('PGroonga', ARRAY['PGroonga', 'Groonga PostgreSQL']);\n"
"```"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:79
#: ../../../../reference/functions/pgroonga-query-expand.md:115
msgid ""
"In this sample, all of `\"PGroonga\"` and `\"pgroonga\"` in query are "
"expanded because PGroonga index is used:"
msgstr "このサンプルではPGroongaインデックスを使っているのでクエリー中の`\"PGroonga\"`も`\"pgroonga\"`もすべて展開されます。"

#: ../../../../reference/functions/pgroonga-query-expand.md:81
msgid ""
"```sql\n"
"SELECT pgroonga_query_expand('synonyms', 'term', 'synonyms',\n"
"                             'PGroonga OR Mroonga') AS query_expand;\n"
"--                  query_expand                   \n"
"-- -------------------------------------------------\n"
"--  ((PGroonga) OR (Groonga PostgreSQL)) OR Mroonga\n"
"-- (1 row)\n"
"SELECT pgroonga_query_expand('synonyms', 'term', 'synonyms',\n"
"                             'pgroonga OR mroonga') AS query_expand;\n"
"--                   query_expand                   \n"
"-- -------------------------------------------------\n"
"--  ((PGroonga) OR (Groonga PostgreSQL)) OR mroonga\n"
"-- (1 row)\n"
"```"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:96
msgid "### Synonym groups {#usage-synonym-groups}"
msgstr "### 同義語グループ {#usage-synonym-groups}"

#: ../../../../reference/functions/pgroonga-query-expand.md:98
msgid "Since 2.2.1."
msgstr "2.2.1で追加。"

#: ../../../../reference/functions/pgroonga-query-expand.md:102
#: ../../../../reference/functions/pgroonga-query-expand.md:156
msgid ""
"```sql\n"
"CREATE TABLE synonym_groups (\n"
"  synonyms text[]\n"
");"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:107
#: ../../../../reference/functions/pgroonga-query-expand.md:161
msgid ""
"CREATE INDEX synonym_groups_synonyms\n"
"          ON synonym_groups\n"
"       USING pgroonga (synonyms pgroonga_text_array_term_search_ops_v2);"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:111
msgid ""
"INSERT INTO synonym_groups\n"
"  VALUES (ARRAY['PGroonga', 'Groonga']);\n"
"```"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:117
msgid ""
"```sql\n"
"SELECT pgroonga_query_expand('synonym_groups', 'synonyms', 'synonyms',\n"
"                             'PGroonga OR Mroonga') AS query_expand;\n"
"--              query_expand             \n"
"-- --------------------------------------\n"
"--  ((PGroonga) OR (Groonga)) OR Mroonga\n"
"-- (1 row)\n"
"SELECT pgroonga_query_expand('synonym_groups', 'synonyms', 'synonyms',\n"
"                             'pgroonga OR mroonga') AS query_expand;\n"
"--              query_expand             \n"
"-- --------------------------------------\n"
"--  ((PGroonga) OR (Groonga)) OR mroonga\n"
"-- (1 row)\n"
"```"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:132
msgid "### Practical Example Using Synonym groups"
msgstr "### 同義語グループを使った検索の具体例"

#: ../../../../reference/functions/pgroonga-query-expand.md:134
msgid ""
"This is for when you want to search similar names like (Timothy or Tim), "
"(William,Bill or Billy), (Stephen,Steven or Steve)."
msgstr "人名テーブルの中から同じ読み方で漢字の異なる人を探すサンプルです。（例：斉藤, 齊藤, 斎藤, 齋藤）"

#: ../../../../reference/functions/pgroonga-query-expand.md:136
msgid ""
"Here are sample schema and data for solving this problem using Synonym "
"groups."
msgstr "サンプルとなるスキーマとデータは次の通りです。"

#: ../../../../reference/functions/pgroonga-query-expand.md:138
msgid "#### Name Table"
msgstr "#### 人名テーブル"

#: ../../../../reference/functions/pgroonga-query-expand.md:140
msgid ""
"```sql\n"
"CREATE TABLE names (\n"
"  name varchar(255)\n"
");"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:145
msgid ""
"CREATE INDEX pgroonga_names_index\n"
"          ON names\n"
"       USING pgroonga (name pgroonga_varchar_full_text_search_ops_v2);"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:149
msgid ""
"INSERT INTO names\n"
"  (name)\n"
"  VALUES ('William Gates'),('Steven Paul Jobs'),('Timothy Donald Cook');\n"
"```"
msgstr ""
"INSERT INTO names\n"
"  (name)\n"
"  VALUES ('斉藤'),('齊藤'),('斎藤'),('鈴木'),('田中'),('佐藤');\n"
"```"

#: ../../../../reference/functions/pgroonga-query-expand.md:154
msgid "#### Synonym groups Table"
msgstr "#### 同義語テーブル"

#: ../../../../reference/functions/pgroonga-query-expand.md:165
msgid ""
"INSERT INTO synonym_groups\n"
"  VALUES (ARRAY['Stephen', 'Steven', 'Steve']);\n"
"```"
msgstr ""
"INSERT INTO synonym_groups\n"
"  VALUES (ARRAY['斉藤', '齊藤', '斎藤', '齋藤']);\n"
"```"

#: ../../../../reference/functions/pgroonga-query-expand.md:169
msgid ""
"In this example, all of `\"Stephen\"`, `\"Steven\"` and `\"Steve\"` in the "
"query will be shown because the value \"Steve\"  is expanded within PGroonga"
" index used."
msgstr "このサンプルでは「斉藤」で検索することでnamesテーブル内データの`\"斉藤\"`も`\"齊藤\"`も`\"斎藤\"`もすべて以下のように展開されます。"

#: ../../../../reference/functions/pgroonga-query-expand.md:171
msgid ""
"```sql\n"
"SELECT pgroonga_query_expand('synonym_groups', 'synonyms', 'synonyms',\n"
"                             'Steve') AS query_expand;\n"
"--              query_expand             \n"
"-- --------------------------------------\n"
"--   ((Stephen) OR (Steven) OR (Steve))\n"
"-- (1 row)\n"
"```"
msgstr ""
"```sql\n"
"SELECT pgroonga_query_expand('synonym_groups', 'synonyms', 'synonyms',\n"
"                             '斉藤') AS query_expand;\n"
"--              query_expand             \n"
"-- --------------------------------------\n"
"--   ((斉藤) OR (齊藤) OR (斎藤) OR (齋藤))\n"
"-- (1 row)\n"
"```"

#: ../../../../reference/functions/pgroonga-query-expand.md:181
msgid ""
"An example down below is Name Table Search Example with "
"pgroonga_query_expand."
msgstr "この例では、人名テーブルの検索をするので以下のように検索します。"

#: ../../../../reference/functions/pgroonga-query-expand.md:183
msgid ""
"Note: Name Table \"name\" column is `varchar` character type. so that you "
"need specifically to cast  result of  `pgroonga_query_expand` as "
"`pgroonga_query_expand(...)::varchar`.  (You do not need to cast "
"`pgroonga_query_expand()` as varchar when you search on `text` character "
"columns. Because return type of `pgroonga_query_expand()` is `text` "
"character type.)"
msgstr ""
"注意： "
"下記の例では、検索対象のカラムが`varchar`型なので、`pgroonga_query_expand(...)::varchar`として`pgroonga_query_expand`の結果を明示的にキャストする必要があります。(`pgroonga_query_expand()`の戻り値の型は`text`型なので、検索対象のカラムが`text`型の場合はキャストは不要です。)"

#: ../../../../reference/functions/pgroonga-query-expand.md:185
msgid ""
"Without type casting, PostgreSQL uses sequential search when your search "
"column type differs from `pgroonga_query_expand()` type so that you may "
"experience some performance issues."
msgstr ""
"このようにキャストしないと、検索対象のカラムと`pgroonga_query_expand()`の型が異なりシーケンシャルサーチになるため、パフォーマンスが出ません。"

#: ../../../../reference/functions/pgroonga-query-expand.md:187
msgid ""
"```sql\n"
"SELECT name AS synonym_names from names where name &@~ pgroonga_query_expand(\n"
"                             'synonym_groups', 'synonyms', 'synonyms','Steve')::varchar;\n"
"--   synonym_names              \n"
"-- -----------------\n"
"--  Steven Paul Jobs\n"
"--(1 rows)"
msgstr ""
"```sql\n"
"SELECT name AS synonym_names from names where name &@~ pgroonga_query_expand(\n"
"                             'synonym_groups', 'synonyms', 'synonyms','斉藤')::varchar;\n"
"--  synonym_names             \n"
"-- -----------------\n"
"--      斉藤\n"
"--      齊藤\n"
"--      斎藤\n"
"--(3 rows)"

#: ../../../../reference/functions/pgroonga-query-expand.md:195
msgid ""
"-- Sample of EXPLAIN ANALYZE with / without type cast\n"
"-- Without type casting varchar (it uses sequential scan):\n"
"EXPLAIN ANALYZE VERBOSE SELECT name AS synonym_names from names where name &@~ pgroonga_query_expand(\n"
"                             'synonym_groups', 'synonyms', 'synonyms','Steve');\n"
"--                                                                QUERY PLAN                                                               \n"
"-- ----------------------------------------------------------------------------------------------------------------------------------------\n"
"--  Seq Scan on public.names  (cost=0.00..124.38 rows=1 width=516) (actual time=3.959..4.338 rows=1 loops=1)\n"
"--    Output: name\n"
"--    Filter: ((names.name)::text &@~ pgroonga_query_expand('synonym_groups'::cstring, 'synonyms'::text, 'synonyms'::text, 'Steve'::text))\n"
"--    Rows Removed by Filter: 2\n"
"--  Planning Time: 0.167 ms\n"
"--  Execution Time: 4.484 ms\n"
"-- (6 rows)"
msgstr ""
"-- varcharでのキャストが無い時のEXPLAIN ANALYZE結果（シーケンシャルサーチが使われる）：\n"
"EXPLAIN ANALYZE VERBOSE SELECT name AS synonym_names from names where name &@~ pgroonga_query_expand(\n"
"                             'synonym_groups', 'synonyms', 'synonyms','斉藤');\n"
"--                                                               QUERY PLAN                                                               \n"
"-- ---------------------------------------------------------------------------------------------------------------------------------------\n"
"--  Seq Scan on public.names  (cost=0.00..124.38 rows=1 width=516) (actual time=66.684..67.619 rows=3 loops=1)\n"
"--    Output: name\n"
"--    Filter: ((names.name)::text &@~ pgroonga_query_expand('synonym_groups'::cstring, 'synonyms'::text, 'synonyms'::text, '斉藤'::text))\n"
"--    Rows Removed by Filter: 3\n"
"--  Planning Time: 0.420 ms\n"
"--  Execution Time: 67.750 ms\n"
"-- (6 rows)"

#: ../../../../reference/functions/pgroonga-query-expand.md:210
msgid ""
"-- With type casting varchar (it uses index scan): \n"
"EXPLAIN ANALYZE VERBOSE SELECT name AS synonym_names from names where name &@~ pgroonga_query_expand(\n"
"                             'synonym_groups', 'synonyms', 'synonyms','Steve')::varchar;\n"
"--                                                                        QUERY PLAN                                                                        \n"
"-- ---------------------------------------------------------------------------------------------------------------------------------------------------------\n"
"--  Index Scan using pgroonga_names_index on public.names  (cost=0.00..40.50 rows=1 width=516) (actual time=1.311..1.315 rows=1 loops=1)\n"
"--    Output: name\n"
"--    Index Cond: (names.name &@~ (pgroonga_query_expand('synonym_groups'::cstring, 'synonyms'::text, 'synonyms'::text, 'Steve'::text))::character varying)\n"
"--  Planning Time: 3.379 ms\n"
"--  Execution Time: 1.384 ms\n"
"-- (5 rows)"
msgstr ""
"-- varcharでキャスト時のEXPLAIN ANALYZE結果（インデックス利用に注目）：\n"
"EXPLAIN ANALYZE VERBOSE SELECT name AS synonym_names from names where name &@~ pgroonga_query_expand(\n"
"                             'synonym_groups', 'synonyms', 'synonyms','斉藤')::varchar;\n"
"--                                                                           QUERY PLAN                                                                          \n"
"-- --------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
"--  Bitmap Heap Scan on public.names  (cost=0.00..29.06 rows=1 width=516) (actual time=2.212..2.214 rows=3 loops=1)\n"
"--    Output: name\n"
"--    Recheck Cond: (names.name &@~ (pgroonga_query_expand('synonym_groups'::cstring, 'synonyms'::text, 'synonyms'::text, '斉藤'::text))::character varying)\n"
"--    Heap Blocks: exact=1\n"
"--    ->  Bitmap Index Scan on pgroonga_names_index  (cost=0.00..0.00 rows=25 width=0) (actual time=2.197..2.198 rows=3 loops=1)\n"
"--          Index Cond: (names.name &@~ (pgroonga_query_expand('synonym_groups'::cstring, 'synonyms'::text, 'synonyms'::text, '斉藤'::text))::character varying)\n"
"--  Planning Time: 3.855 ms\n"
"--  Execution Time: 2.447 ms\n"
"-- (8 rows)"

#: ../../../../reference/functions/pgroonga-query-expand.md:222
msgid "```"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:225
msgid "## See also"
msgstr "## 参考"

#: ../../../../reference/functions/pgroonga-query-expand.md:227
msgid ""
"  * [`&@~` operator][query-v2]: Full text search by easy to use query "
"language"
msgstr "  * [`&@~`演算子][query-v2]：便利なクエリー言語を使った全文検索"

#: ../../../../reference/functions/pgroonga-query-expand.md:229
msgid ""
"  * [`&@~|` operator][query-in-v2]: Full text search by an array of queries "
"in easy to use query language"
msgstr "  * [`&@~|`演算子][query-in-v2]：便利なクエリー言語を使ったクエリーの配列での全文検索"

#: ../../../../reference/functions/pgroonga-query-expand.md:231
msgid ""
"[groonga-query-"
"syntax]:http://groonga.org/docs/reference/grn_expr/query_syntax.html"
msgstr ""
"[groonga-query-"
"syntax]:http://groonga.org/ja/docs/reference/grn_expr/query_syntax.html"

#: ../../../../reference/functions/pgroonga-query-expand.md:233
msgid ""
"[groonga-query-"
"expander]:http://groonga.org/docs/reference/commands/select.html#select-"
"query-expander"
msgstr ""
"[groonga-query-"
"expander]:http://groonga.org/ja/docs/reference/commands/select.html#select-"
"query-expander"

#: ../../../../reference/functions/pgroonga-query-expand.md:235
msgid ""
"[wikipedia-query-expansion]:https://en.wikipedia.org/wiki/Query_expansion"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:237
msgid "[query-v2]:../operators/query-v2.html"
msgstr ""

#: ../../../../reference/functions/pgroonga-query-expand.md:239
msgid "[query-in-v2]:../operators/query-in-v2.html"
msgstr ""
