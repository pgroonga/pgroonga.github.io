msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: LIKE operator\n"
"upper_level: ../\n"
"---"
msgstr ""
"---\n"
"title: LIKE演算子\n"
"upper_level: ../\n"
"---"

msgid "# `LIKE` operator"
msgstr "# `LIKE`演算子"

msgid "## Summary"
msgstr "## 概要"

msgid ""
"PGroonga converts `column LIKE '%KEYWORD%'` condition to `column %% 'KEYWORD'`"
" internally. [`%%` operator](match.html) performs full text search with index."
" It's faster than `LIKE` operator without index."
msgstr ""
"PGroongaは内部的に`column LIKE '%キーワード%'`条件を`column %% 'キーワード'`条件に変換します。[`%%`演算子](m"
"atch.html)はインデックスを使って全文検索をします。これはインデックスを使わない`LIKE`演算子より速いです。"

msgid ""
"`column LIKE '%KEYWORD%'` with index is slower than `column %% 'KEYWORD'` with"
" index because `column LIKE '%KEYWORD%'` with index needs \"[Recheck]({{ site.p"
"ostgresql_doc_base_url.en }}/index-scanning.html)\". `column %% 'KEYWORD'` does"
"n't need \"Recheck\"."
msgstr ""
"インデックスを使った`column LIKE '%キーワード%'`は`column %% 'キーワード'`よりも遅いです。これは、インデックスを使った`co"
"lumn LIKE '%キーワード%'`は「[再検査]({{ site.postgresql_doc_base_url.ja }}/index-scanni"
"ng.html)」する必要があるからです。`column %% 'キーワード'`は「再検査」する必要がありません。"

msgid ""
"The original `LIKE` operator searches against text as is. But `%%` operator pe"
"rforms full text search against normalized text. It means that search result o"
"f `LIKE` operator with index needs \"Recheck\"."
msgstr ""
"元の`LIKE`演算子は対象テキストに対して検索します。しかし、`%%`演算子は正規化したテキストに対して検索します。そのため、インデックスを使って`LIK"
"E`演算子の検索を実行した場合は「再検査」が必要になります。"

msgid ""
"However, If the column type is `varchar`, `LIKE` or `ILIKE` are always sequent"
"ial search. Because PGroonga can't use index against `varchar`."
msgstr ""
"ただし、カラムの型が `varchar` の場合、 `LIKE` または `ILIKE` は常にシーケンシャルサーチになります。PGroongaは `var"
"char` に対してインデックスを使えないためです。"

msgid "## Operator classes"
msgstr "## 演算子クラス"

msgid ""
"You need to specify one of the following operator classes to use this operator"
":"
msgstr "この演算子を使うには次のどれかの演算子クラスを指定する必要があります。"

msgid "  * `pgroonga_text_full_text_search_ops_v2`: Default for `text`"
msgstr "  * `pgroonga_text_full_text_search_ops_v2`：`text`型のデフォルト"

msgid "  * `pgroonga_text_regexp_ops_v2`: For `text`"
msgstr "  * `pgroonga_text_regexp_ops_v2`：`text`用"

msgid "  * `pgroonga_text_full_text_search_ops`: For `text`"
msgstr "  * `pgroonga_text_full_text_search_ops`：`text`用"

msgid "  * `pgroonga_text_regexp_ops`: For `text`"
msgstr "  * `pgroonga_text_regexp_ops`：`text`用"

msgid "## Syntax"
msgstr "## 構文"

msgid "Here is the syntax of this operator:"
msgstr "この演算子の構文は次の通りです。"

msgid ""
"```sql\n"
"column LIKE pattern\n"
"```"
msgstr ""

msgid "`column` is a column to be searched."
msgstr "`column`は検索対象のカラムです。"

msgid "`pattern` is a search pattern. It's `text` type."
msgstr "`pattern`は検索パターンです。`text`型です。"

msgid "## Usage"
msgstr "## 使い方"

msgid "Here are sample schema and data for examples:"
msgstr "例に使うサンプルスキーマとデータは次の通りです。"

msgid ""
"```sql\n"
"CREATE TABLE memos (\n"
"  id integer,\n"
"  content text\n"
");"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_content_index ON memos USING pgroonga (content);\n"
"```"
msgstr ""

msgid ""
"```sql\n"
"INSERT INTO memos VALUES (1, 'PostgreSQL is a relational database management s"
"ystem.');\n"
"INSERT INTO memos VALUES (2, 'Groonga is a fast full text search engine that s"
"upports all languages.');\n"
"INSERT INTO memos VALUES (3, 'PGroonga is a PostgreSQL extension that uses Gro"
"onga as index.');\n"
"INSERT INTO memos VALUES (4, 'There is groonga command.');\n"
"```"
msgstr ""
"```sql\n"
"INSERT INTO memos VALUES (1, 'PostgreSQLはリレーショナル・データベース管理システムです。');\n"
"INSERT INTO memos VALUES (2, 'Groongaは日本語対応の高速な全文検索エンジンです。');\n"
"INSERT INTO memos VALUES (3, 'PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です"
"。');\n"
"INSERT INTO memos VALUES (4, 'groongaコマンドがあります。');\n"
"```"

msgid "You can perform `LIKE` operator with index:"
msgstr "インデックスを使って`LIKE`演算子を実行できます。"

msgid ""
"```sql\n"
"SET enable_seqscan = off;\n"
"SET enable_indexscan = on;\n"
"SET enable_bitmapscan = on;"
msgstr ""

msgid ""
"SELECT * FROM memos WHERE content LIKE '%groonga%';\n"
"--  id |          content          \n"
"-- ----+---------------------------\n"
"--   4 | There is groonga command.\n"
"-- (1 row)\n"
"```"
msgstr ""
"SELECT * FROM memos WHERE content LIKE '%groonga%';\n"
"--  id |           content           \n"
"-- ----+-----------------------------\n"
"--   4 | groongaコマンドがあります。\n"
"-- (1 row)\n"
"```"

msgid ""
"The default operator class of PGroonga index for `text` type can't find any re"
"cords with partial alphabet keyword. For example, you can't find record with `"
"roonga` keyword:"
msgstr ""
"PGroongaのインデックスが適用している`text`型用のデフォルトのオペレータークラスは、キーワードがアルファベットのみだった場合、キーワードの一部だ"
"けで検索してもヒットしません。たとえば、`roonga`というキーワードではヒットしません。"

msgid ""
"SELECT * FROM memos WHERE content LIKE '%roonga%';\n"
"--  id | content \n"
"-- ----+---------\n"
"-- (0 rows)\n"
"```"
msgstr ""

msgid "But you can find some records with `roonga` keyword without index:"
msgstr "インデックスを使わない場合は`roonga`というキーワードでもヒットします。"

msgid ""
"```sql\n"
"SET enable_seqscan = on;\n"
"SET enable_indexscan = off;\n"
"SET enable_bitmapscan = off;"
msgstr ""

msgid ""
"SELECT * FROM memos WHERE content LIKE '%roonga%';\n"
"--  id |                                content                               "
"  \n"
"-- ----+----------------------------------------------------------------------"
"--\n"
"--   2 | Groonga is a fast full text search engine that supports all languages"
".\n"
"--   3 | PGroonga is a PostgreSQL extension that uses Groonga as index.\n"
"--   4 | There is groonga command.\n"
"-- (3 rows)\n"
"```"
msgstr ""
"SELECT * FROM memos WHERE content LIKE '%roonga%';\n"
"--  id |                                  content                             "
"     \n"
"-- ----+----------------------------------------------------------------------"
"-----\n"
"--   2 | Groongaは日本語対応の高速な全文検索エンジンです。\n"
"--   3 | PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です。\n"
"--   4 | groongaコマンドがあります。\n"
"-- (3 rows)\n"
"```"

msgid "You can find records by prefix alphabet keyword such as `Gro`:"
msgstr "キーワードがアルファベットだけだった場合でも、`Gro`のようにキーワードの先頭部分を指定した場合はヒットします。"

msgid ""
"SELECT * FROM memos WHERE content LIKE '%Gro%';\n"
"--  id |                                content                               "
"  \n"
"-- ----+----------------------------------------------------------------------"
"--\n"
"--   2 | Groonga is a fast full text search engine that supports all languages"
".\n"
"--   3 | PGroonga is a PostgreSQL extension that uses Groonga as index.\n"
"-- (2 rows)\n"
"```"
msgstr ""
"SELECT * FROM memos WHERE content LIKE '%Gro%';\n"
"--  id |                                  content                             "
"     \n"
"-- ----+----------------------------------------------------------------------"
"-----\n"
"--   2 | Groongaは日本語対応の高速な全文検索エンジンです。\n"
"--   3 | PGroongaはインデックスとしてGroongaを使うためのPostgreSQLの拡張機能です。\n"
"-- (2 rows)\n"
"```"

msgid "If you want to search by partial alphabet keyword, there are two approaches."
msgstr "キーワードがアルファベットの場合でも、キーワードの一部で検索できるようにする方法は2つあります。"

msgid "The first approach is using the `TokenBigramSplitSymbolAlphaDigit` tokenizer:"
msgstr "最初の方法は`TokenBigramSplitSymbolAlphaDigit`トークナイザーを使う方法です。"

msgid ""
"```sql\n"
"DROP INDEX IF EXISTS pgroonga_content_index;"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_content_index\n"
"          ON memos\n"
"       USING pgroonga (content)\n"
"        WITH (tokenizer='TokenBigramSplitSymbolAlphaDigit');\n"
"```"
msgstr ""

msgid "You can find records by `roonga`:"
msgstr "これで`roonga`でもヒットするようになります。"

msgid ""
"See [Customization in `CREATE INDEX USING pgroonga`](../create-index-using-pgr"
"oonga.html#customization) for tokenizer."
msgstr ""
"トークナイザーをカスタマイズする方法については[`CREATE INDEX USING pgroonga`のカスタマイズ](../create-index-"
"using-pgroonga.html#customization)を参照してください。"

msgid "The second approach is using `pgroonga_text_regexp_ops_v2` operator class:"
msgstr "2つめの方法は`pgroonga_text_regexp_ops`オペレータークラスを使う方法です。"

msgid ""
"CREATE INDEX pgroonga_content_index\n"
"          ON memos\n"
"       USING pgroonga (content pgroonga_text_regexp_ops_v2);\n"
"```"
msgstr ""

msgid "You can find records by `rooonga`:"
msgstr "これで`roonga`でもヒットするようになります。"

msgid "## See also"
msgstr "## 参考"

msgid "  * [`CREATE INDEX USING pgroonga`](../create-index-using-pgroonga.html)"
msgstr ""
