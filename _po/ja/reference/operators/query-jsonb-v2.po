msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: \"&@~ operator for jsonb type\"\n"
"upper_level: ../\n"
"---"
msgstr ""
"---\n"
"title: \"jsonb型用の&@~演算子\"\n"
"upper_level: ../\n"
"---"

msgid "# `&@~` operator for `jsonb` type"
msgstr "# `jsonb`型用の`&@~`演算子"

msgid "Since 1.2.1."
msgstr "1.2.1で追加。"

msgid "`&?` operator is deprecated since 1.2.2. Use `&@~` operator instead."
msgstr "`&?`演算子は1.2.2から非推奨です。代わりに`&@~`演算子を使ってください。"

msgid "## Summary"
msgstr "## 概要"

msgid ""
"`&@~` operator performs full text search against all texts in `jsonb` with que"
"ry."
msgstr "`&@~`は`jsonb`内のすべてのテキストに対してクエリーを使って全文検索を実行します。"

msgid ""
"Query's syntax is similar to syntax that is used in Web search engine. For exa"
"mple, you can use OR search by `KEYWORD1 OR KEYWORD2` in query."
msgstr "クエリーの構文はWeb検索エンジンで使われている構文と似ています。たとえば、クエリーで`キーワード1 OR キーワード2`と書くとOR検索できます。"

msgid "## Syntax"
msgstr "## 構文"

msgid ""
"```sql\n"
"column &@~ query\n"
"```"
msgstr ""

msgid "`column` is a column to be searched. It's `jsonb` type."
msgstr "`column`は検索対象のカラムです。型は`jsonb`型です。"

msgid "`query` is a query for full text search. It's `text` type."
msgstr "`query`は全文検索で使うクエリーです。`text`型です。"

msgid "[Groonga's query syntax][groonga-query-syntax] is used in `query`."
msgstr "`qeury`では[Groongaのクエリー構文][groonga-query-syntax]を使います。"

msgid "## Operator classes"
msgstr "## 演算子クラス"

msgid ""
"You need to specify one of the following operator classes to use this operator"
":"
msgstr "この演算子を使うには次のどれかの演算子クラスを指定する必要があります。"

msgid "  * `pgroonga_jsonb_ops_v2`: Default for `jsonb`"
msgstr "  * `pgroonga_jsonb_ops_v2`：`jsonb`型のデフォルト"

msgid "  * `pgroonga_jsonb_ops`: For `jsonb`"
msgstr "  * `pgroonga_jsonb_ops`：`jsonb`型用"

msgid "## Usage"
msgstr "## 使い方"

msgid "Here are sample schema and data for examples:"
msgstr "例に使うサンプルスキーマとデータは次の通りです。"

msgid ""
"```sql\n"
"CREATE TABLE logs (\n"
"  record jsonb\n"
");"
msgstr ""

msgid "CREATE INDEX pgroonga_logs_index ON logs USING pgroonga (record);"
msgstr ""

msgid ""
"INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"Server is started.\",\n"
"                \"host\":    \"www.example.com\",\n"
"                \"tags\": [\n"
"                  \"web\",\n"
"                  \"example.com\"\n"
"                ]\n"
"              }');\n"
"INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"GET /\",\n"
"                \"host\":    \"www.example.com\",\n"
"                \"code\":    200,\n"
"                \"tags\": [\n"
"                  \"web\",\n"
"                  \"example.com\"\n"
"                ]\n"
"              }');\n"
"INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"Send to <info@example.com>.\",\n"
"                \"host\":    \"mail.example.net\",\n"
"                \"tags\": [\n"
"                  \"mail\",\n"
"                  \"example.net\"\n"
"                ]\n"
"              }');\n"
"```"
msgstr ""

msgid ""
"You can perform full text search with multiple keywords by `&@~` operator like"
" `KEYWORD1 KEYWORD2`. You can also do OR search by `KEYWORD1 OR KEYWORD2`:"
msgstr ""
"`&@~`演算子を使うと`キーワード1 キーワード2`のように複数のキーワードを指定して全文検索できます。`キーワード1 OR キーワード2`のようにOR検"
"索することもできます。"

msgid ""
"(It uses [`jsonb_pretty()` function][postgresql-jsonb-pretty] provided since P"
"ostgreSQL 9.5 for readability.)"
msgstr ""
"（読みやすくするためにPostgreSQL 9.5以降で使える[`jsonb_pretty()`関数][postgresql-jsonb-pretty]を使"
"っています。）"

msgid ""
"```sql\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record &@~ 'server OR mail';\n"
"--                  jsonb_pretty                 \n"
"-- ----------------------------------------------\n"
"--  {                                           +\n"
"--      \"host\": \"www.example.com\",              +\n"
"--      \"tags\": [                               +\n"
"--          \"web\",                              +\n"
"--          \"example.com\"                       +\n"
"--      ],                                      +\n"
"--      \"message\": \"Server is started.\"         +\n"
"--  }\n"
"--  {                                           +\n"
"--      \"host\": \"mail.example.net\",             +\n"
"--      \"tags\": [                               +\n"
"--          \"mail\",                             +\n"
"--          \"example.net\"                       +\n"
"--      ],                                      +\n"
"--      \"message\": \"Send to <info@example.com>.\"+\n"
"--  }\n"
"-- (2 rows)\n"
"```"
msgstr ""

msgid ""
"## Important note for better PGroonga performance: If you want to search on sp"
"ecific key values in your jsonb column, you need to create indexes on all of y"
"our json keys that you want to search"
msgstr ""
"## PGroongaのパフォーマンス向上のための注意事項: jsonbカラム内にある特定のキーの値を検索したい場合、検索対象となるすべてのキーに対してイン"
"デックス作成が必要"

msgid ""
"When you use the `&@~` operator to search through specific key values in your "
"jsonb column, not just the entire jsonb column like the previous examples, the"
"n you need to index each of these keys. Without creating these indexes, the `&"
"@~` operator only uses sequential search and the query performance will be slo"
"w."
msgstr ""
"`&@~`演算子を用いてjsonbカラム内にある特定のキーの値を検索する時には、先の例で実施されてるようなjsonbカラム全体をインデックス対象にするのでは"
"なく、検索対象のそれぞれのキーに対してインデックスを作成する必要があります。それらのインデックスが存在しない場合は  `&@~`演算子はシーケンシャル検索の"
"みを実行するため、パフォーマンスは極めて低速となります。"

msgid "Here is a demo, using the previous `logs` table examples:"
msgstr "こちらに前例の`logs`テーブルを用いたサンプルデモを記載します:"

msgid ""
"```sql\n"
"-- This query uses PGroonga index so that performance is great\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record &@~ 'get';\n"
"--           jsonb_pretty          \n"
"-- --------------------------------\n"
"--  {                             +\n"
"--      \"code\": 200,              +\n"
"--      \"host\": \"www.example.com\",+\n"
"--      \"tags\": [                 +\n"
"--          \"web\",                +\n"
"--          \"example.com\"         +\n"
"--      ],                        +\n"
"--      \"message\": \"GET /\"        +\n"
"--  }\n"
"-- (1 row)"
msgstr ""
"```sql\n"
"-- このクエリはPGroongaのインデックスを使うのでパフォーマンスは最高です\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record &@~ 'get';\n"
"--           jsonb_pretty          \n"
"-- --------------------------------\n"
"--  {                             +\n"
"--      \"code\": 200,              +\n"
"--      \"host\": \"www.example.com\",+\n"
"--      \"tags\": [                 +\n"
"--          \"web\",                +\n"
"--          \"example.com\"         +\n"
"--      ],                        +\n"
"--      \"message\": \"GET /\"        +\n"
"--  }\n"
"-- (1 row)"

msgid ""
"-- This query does not use PGroonga index, just sequential search (slow)\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record->'message' &@~ 'get';\n"
"--           jsonb_pretty          \n"
"-- --------------------------------\n"
"--  {                             +\n"
"--      \"code\": 200,              +\n"
"--      \"host\": \"www.example.com\",+\n"
"--      \"tags\": [                 +\n"
"--          \"web\",                +\n"
"--          \"example.com\"         +\n"
"--      ],                        +\n"
"--      \"message\": \"GET /\"        +\n"
"--  }\n"
"-- (1 row)"
msgstr ""
"-- このクエリはPGroongaインデックスを使用しないので、単なるシーケンシャル検索になります(遅いです)\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record->'message' &@~ 'get';\n"
"--           jsonb_pretty          \n"
"-- --------------------------------\n"
"--  {                             +\n"
"--      \"code\": 200,              +\n"
"--      \"host\": \"www.example.com\",+\n"
"--      \"tags\": [                 +\n"
"--          \"web\",                +\n"
"--          \"example.com\"         +\n"
"--      ],                        +\n"
"--      \"message\": \"GET /\"        +\n"
"--  }\n"
"-- (1 row)"

msgid ""
"-- Just run EXPLAIN ANALYZE on these queries and see it for yourself.\n"
"-- Searching on entire jsonb record column uses Index.\n"
"EXPLAIN ANALYZE verbose SELECT jsonb_pretty(record) FROM logs WHERE record &@~"
" 'get';\n"
"--                                                          QUERY PLAN        "
"                                                  \n"
"-- ---------------------------------------------------------------------------"
"--------------------------------------------------\n"
"--  Bitmap Heap Scan on public.logs  (cost=0.00..21.03 rows=1 width=32) (actua"
"l time=1.577..1.578 rows=1 loops=1)\n"
"--    Output: jsonb_pretty(record)\n"
"--    Recheck Cond: (logs.record &@~ 'get'::text)\n"
"--    Heap Blocks: exact=1\n"
"--    ->  Bitmap Index Scan on pgroonga_logs_index  (cost=0.00..0.00 rows=14 w"
"idth=0) (actual time=1.566..1.566 rows=1 loops=1)\n"
"--          Index Cond: (logs.record &@~ 'get'::text)\n"
"--  Planning Time: 0.680 ms\n"
"--  Execution Time: 1.631 ms\n"
"-- (8 rows)"
msgstr ""
"-- EXPLAIN ANALYZEを実行して、ご自身でパフォーマンスを比較してみてください\n"
"-- jsonbカラム全体を検索する時はインデックスが使われます\n"
"EXPLAIN ANALYZE verbose SELECT jsonb_pretty(record) FROM logs WHERE record &@~"
" 'get';\n"
"--                                                          QUERY PLAN        "
"                                                  \n"
"-- ---------------------------------------------------------------------------"
"--------------------------------------------------\n"
"--  Bitmap Heap Scan on public.logs  (cost=0.00..21.03 rows=1 width=32) (actua"
"l time=1.577..1.578 rows=1 loops=1)\n"
"--    Output: jsonb_pretty(record)\n"
"--    Recheck Cond: (logs.record &@~ 'get'::text)\n"
"--    Heap Blocks: exact=1\n"
"--    ->  Bitmap Index Scan on pgroonga_logs_index  (cost=0.00..0.00 rows=14 w"
"idth=0) (actual time=1.566..1.566 rows=1 loops=1)\n"
"--          Index Cond: (logs.record &@~ 'get'::text)\n"
"--  Planning Time: 0.680 ms\n"
"--  Execution Time: 1.631 ms\n"
"-- (8 rows)"

msgid ""
"-- But when you search on specific key value in jsonb column, it DOES NOT USE "
"Index\n"
"EXPLAIN ANALYZE verbose SELECT jsonb_pretty(record) FROM logs WHERE record->'m"
"essage' &@~ 'get';\n"
"--                                                QUERY PLAN                  "
"                              \n"
"-- ---------------------------------------------------------------------------"
"------------------------------\n"
"--  Seq Scan on public.logs  (cost=0.00..1047.00 rows=1 width=32) (actual time"
"=0.422..0.566 rows=1 loops=1)\n"
"--    Output: jsonb_pretty(record)\n"
"--    Filter: ((logs.record -> 'message'::text) &@~ 'get'::text)\n"
"--    Rows Removed by Filter: 2\n"
"--  Planning Time: 0.035 ms\n"
"--  Execution Time: 0.576 ms\n"
"-- (6 rows)\n"
"```"
msgstr ""
"-- しかし、jsonbカラム内の特定のキーの値を検索する際には、インデックスは使われません\n"
"EXPLAIN ANALYZE verbose SELECT jsonb_pretty(record) FROM logs WHERE record->'m"
"essage' &@~ 'get';\n"
"--                                                QUERY PLAN                  "
"                              \n"
"-- ---------------------------------------------------------------------------"
"------------------------------\n"
"--  Seq Scan on public.logs  (cost=0.00..1047.00 rows=1 width=32) (actual time"
"=0.422..0.566 rows=1 loops=1)\n"
"--    Output: jsonb_pretty(record)\n"
"--    Filter: ((logs.record -> 'message'::text) &@~ 'get'::text)\n"
"--    Rows Removed by Filter: 2\n"
"--  Planning Time: 0.035 ms\n"
"--  Execution Time: 0.576 ms\n"
"-- (6 rows)\n"
"```"

msgid "Now let's create an index of `message` key value in your record jsonb column:"
msgstr "さて、ここでjsonbカラム内にある`message`キーのインデックスを作成するとどうなるでしょう:"

msgid ""
"```sql\n"
"-- Create \"message\" key value index for your record jsonb column\n"
"CREATE INDEX pgroonga_message_index ON logs USING pgroonga ((record->'message'"
"));"
msgstr ""
"```sql\n"
"-- jsonbカラム内の\"message\"キーのインデックスを作成します\n"
"CREATE INDEX pgroonga_message_index ON logs USING pgroonga ((record->'message'"
"));"

msgid ""
"-- Before you execute EXPLAIN ANALYZE, you need to set sequential scan off\n"
"-- to make sure it uses PGroonga index.\n"
"-- Note: Do not set enable_seqscan = off on production environment\n"
"SET enable_seqscan = off;"
msgstr ""
"-- EXPLAIN ANALYZEを実行前にPGroongaが確実にインデックスを利用するようシーケンシャルスキャンをOFFにします\n"
"-- 注意: 本番環境では SET enable_seqscan = off を実施しないようにしてください\n"
"SET enable_seqscan = off;"

msgid ""
"-- Analyze the query: Now it uses PGroonga index\n"
"EXPLAIN ANALYZE verbose SELECT jsonb_pretty(record) FROM logs WHERE record->'m"
"essage' &@~ 'get';\n"
"--                                                               QUERY PLAN   "
"                                                            \n"
"-- ---------------------------------------------------------------------------"
"------------------------------------------------------------\n"
"--  Index Scan using pgroonga_message_index on public.logs  (cost=0.00..4.01 r"
"ows=1 width=32) (actual time=2.389..2.393 rows=1 loops=1)\n"
"--    Output: jsonb_pretty(record)\n"
"--    Index Cond: ((logs.record -> 'message'::text) &@~ 'get'::text)\n"
"--  Planning Time: 0.201 ms\n"
"--  Execution Time: 2.496 ms\n"
"-- (5 rows)"
msgstr ""
"-- クエリーを分析すると確実にインデックスが使われているのが分かります\n"
"EXPLAIN ANALYZE verbose SELECT jsonb_pretty(record) FROM logs WHERE record->'m"
"essage' &@~ 'get';\n"
"--                                                               QUERY PLAN   "
"                                                            \n"
"-- ---------------------------------------------------------------------------"
"------------------------------------------------------------\n"
"--  Index Scan using pgroonga_message_index on public.logs  (cost=0.00..4.01 r"
"ows=1 width=32) (actual time=2.389..2.393 rows=1 loops=1)\n"
"--    Output: jsonb_pretty(record)\n"
"--    Index Cond: ((logs.record -> 'message'::text) &@~ 'get'::text)\n"
"--  Planning Time: 0.201 ms\n"
"--  Execution Time: 2.496 ms\n"
"-- (5 rows)"

msgid "```"
msgstr ""

msgid ""
"## If you don’t know which jsonb key value should be indexed beforehand, then "
"you should use `` &` `` operator instead"
msgstr "## もし事前に検索対象となるjsonbカラム内のキーが分からない場合には、代わりに `` &` `` 演算子を使いましょう"

msgid ""
"Because of the nature of unstructured data, like json/jsonb data in this case,"
" it is sometimes difficult to specify which key values to be indexed beforehan"
"d. (Say you need to store some user’s input which you don’t know what kind of "
"data structure they use, and later user requests you to implement a search fea"
"ture for that data.)\n"
"In that case, you should use  the `` &` ``  operator that can still use the `p"
"groonga_jsonb_ops_v2` index without specifying which key values should be inde"
"xed."
msgstr ""
"未定義のデータを格納するようなjson/jsonbカラムを利用する際の常として、検索対象となる項目が事前に分からないことが時々発生します。（例えばユーザから"
"様々なデータを保存しておく場所が欲しいと頼まれ、jsonbで格納場所を準備したものの、後日それらのデータを検索対象にしたいと言われることもあります）。\n"
"そうしたケースにおいて `` &` `` 演算子を用いることで、事前にjsonbカラム内のキーをインデックス対象に含めていなくとも`pgroonga_jso"
"nb_ops_v2` インデックスを使って高速な検索を実現することができます。"

msgid "Let’s see an example:"
msgstr "具体的な例を見てみましょう:"

msgid ""
"-- Create index on your jsonb field (not any of its key values)\n"
"CREATE INDEX pgroonga_logs_index ON logs USING pgroonga (record);"
msgstr ""
"-- jsonbカラム全体にインデックスを作成します(特定のキーに対してではありません)\n"
"CREATE INDEX pgroonga_logs_index ON logs USING pgroonga (record);"

msgid ""
"INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"Server is started.\",\n"
"                \"host\":    \"www.example.com\",\n"
"                \"tags\": [\n"
"                  \"web\",\n"
"                  \"example.com\"\n"
"                ]\n"
"              }');\n"
"INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"GET /\",\n"
"                \"host\":    \"www.example.com\",\n"
"                \"code\":    200,\n"
"                \"tags\": [\n"
"                  \"web\",\n"
"                  \"example.com\"\n"
"                ]\n"
"              }');\n"
"INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"Send to <info@example.com>.\",\n"
"                \"host\":    \"mail.example.net\",\n"
"                \"tags\": [\n"
"                  \"mail\",\n"
"                  \"example.net\"\n"
"                ]\n"
"              }');"
msgstr ""

msgid ""
"-- Now without creating any key values indexes, you can still use PGroonga ind"
"ex with &` operator to fully enjoy PGroonga performance\n"
"EXPLAIN ANALYZE VERBOSE SELECT * FROM logs WHERE record &` '(paths @ \"message\""
") && query(\"string\", \"get\")';\n"
"--                                                          QUERY PLAN        "
"                                                  \n"
"-- ---------------------------------------------------------------------------"
"--------------------------------------------------\n"
"--  Bitmap Heap Scan on public.logs  (cost=0.00..21.03 rows=1 width=32) (actua"
"l time=1.020..1.022 rows=1 loops=1)\n"
"--    Output: record\n"
"--    Recheck Cond: (logs.record &` '(paths @ \"message\") && query(\"string\",\"ge"
"t\")'::text)\n"
"--    Heap Blocks: exact=1\n"
"--    ->  Bitmap Index Scan on pgroonga_logs_index  (cost=0.00..0.00 rows=14 w"
"idth=0) (actual time=1.012..1.013 rows=1 loops=1)\n"
"--          Index Cond: (logs.record &` '(paths @ \"message\") && query(\"string\""
",\"get\")'::text)\n"
"--  Planning Time: 0.379 ms\n"
"--  Execution Time: 1.077 ms\n"
"-- (8 rows)\n"
"```"
msgstr ""
"-- &` 演算子を用いることで、特定のキーにインデックスを作成せずともPGroongaの高性能さを利用することができます\n"
"EXPLAIN ANALYZE VERBOSE SELECT * FROM logs WHERE record &` '(paths @ \"message\""
") && query(\"string\", \"get\")';\n"
"--                                                          QUERY PLAN        "
"                                                  \n"
"-- ---------------------------------------------------------------------------"
"--------------------------------------------------\n"
"--  Bitmap Heap Scan on public.logs  (cost=0.00..21.03 rows=1 width=32) (actua"
"l time=1.020..1.022 rows=1 loops=1)\n"
"--    Output: record\n"
"--    Recheck Cond: (logs.record &` '(paths @ \"message\") && query(\"string\",\"ge"
"t\")'::text)\n"
"--    Heap Blocks: exact=1\n"
"--    ->  Bitmap Index Scan on pgroonga_logs_index  (cost=0.00..0.00 rows=14 w"
"idth=0) (actual time=1.012..1.013 rows=1 loops=1)\n"
"--          Index Cond: (logs.record &` '(paths @ \"message\") && query(\"string\""
",\"get\")'::text)\n"
"--  Planning Time: 0.379 ms\n"
"--  Execution Time: 1.077 ms\n"
"-- (8 rows)\n"
"```"

msgid "Hope all these examples help you to create some great applications 😄"
msgstr "これらの説明や使用例が、皆さんの素晴らしいアプリケーションを作る手助けになれれば幸いです 😄"

msgid "## See also"
msgstr "## 参考"

msgid "  * [`jsonb` support][jsonb]"
msgstr "  * [`jsonb`サポート][jsonb]"

msgid ""
"  * [`&@` operator][match-jsonb-v2]: Full text search against all text data in"
" `jsonb` by a keyword"
msgstr "  * [`&@`演算子][match-jsonb-v2]：`jsonb`内のすべてのテキストデータをキーワード1つで全文検索"

msgid ""
"  * [`` &` `` operator][script-jsonb-v2]: Advanced search by ECMAScript like q"
"uery language"
msgstr "  * [`` &` ``演算子][script-jsonb-v2]：ECMAScriptのようなクエリー言語を使った高度な検索"

msgid "  * [`@>` operator][contain-jsonb]: Search by a `jsonb` data"
msgstr "  * [`@>`演算子][contain-jsonb]：`jsonb`データを使った検索"

msgid "  * [Groonga's query syntax][groonga-query-syntax]"
msgstr "  * [Groongaのクエリーの構文][groonga-query-syntax]"

msgid "[jsonb]:../jsonb.html"
msgstr ""

msgid ""
"[match-jsonb-v2]:match-jsonb-v2.html\n"
"[script-jsonb-v2]:script-jsonb-v2.html\n"
"[contain-jsonb]:contain-jsonb.html"
msgstr ""

msgid ""
"[groonga-query-syntax]:http://groonga.org/docs/reference/grn_expr/query_syntax"
".html"
msgstr ""
"[groonga-query-syntax]:http://groonga.org/ja/docs/reference/grn_expr/query_syn"
"tax.html"

msgid ""
"[postgresql-jsonb-pretty]:{{ site.postgresql_doc_base_url.en }}/functions-json"
".html#FUNCTIONS-JSON-PROCESSING-TABLE"
msgstr ""
"[postgresql-jsonb-pretty]:{{ site.postgresql_doc_base_url.ja }}/functions-json"
".html#FUNCTIONS-JSON-PROCESSING-TABLE"
